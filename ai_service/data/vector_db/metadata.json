{
  "contents": [
    "项目7 预测汽车油耗效率：TensorFlow.js应用开发",
    "项目描述",
    "TensorFlow.js 是一个用于使用 JavaScript 进行机器学习开发的库，用于在浏览器和 Node.js 训练和部署机器学习模型。TensorFlow.js支持使用JavaScript在浏览器端部署，也与微信小程序有很好的集成。TensorFlow.js支持所有Python可以加载的模型，在Node.js环境中直接通过调研API即可，在浏览器环境中需要转换为浏览器支持的JSON格式。TensorFlow.js提供了一系列预训练好的模型，包括图像识别、语音识别、人体姿态识别、物体识别、文字分类等。",
    "本项目将通过预测汽车油耗效率、手写数字识别两个项目介绍使用TensorFlow.js进行 TensorFlow 模型的开发、训练和部署，体验TensorFlow.js让用户直接在浏览器加载TensorFlow，通过本地CPU或者GPU资源进行所需的机器学习运算，灵活的进行各种AI应用的开发。",
    "项目目标",
    "知识目标",
    "了解TensorFlow.js的优点",
    "了解TensorFlow.js的相关概念",
    "掌握TensorFlow.js环境配置",
    "技能目标",
    "能通过Layers API创建模型",
    "能通过Core API创建模型",
    "能在浏览器中使用TensorFlow.js",
    "能在Node.js中使用TensorFlow.js",
    "能熟练使用Node.js",
    "能熟练的TensorFlow.js模型部署，开发相应AI应用",
    "7.1 认识TensorFlow.js",
    "TensorFlow.js 是 TensorFlow 的 JavaScript 版本，支持 GPU 硬件加速，可以运行在 Node.js 或浏览器环境中。它不但支持完全基于 JavaScript 从头开发、训练和部署模型，也可以用来运行已有的 Python 版 TensorFlow 模型，或者基于现有的模型进行继续训练。",
    "7.1.1 TensorFlow.js优点",
    "Google针对浏览器、移动端、IOT 设备及大型生产环境均提供了相应的扩展解决方案，TensorFlow.js 就是 JavaScript 语言版本的扩展，在它的支持下，前端开发者就可以直接在浏览器环境中来实现深度学习的功能。",
    "在2017年，一个叫做DeepLearning.js的工程诞生了，这是一款基于 WebGL 加速的开放源代码 JavaScript 机器学习库，该库可以直接在浏览器中运行，而无需进行安装，也无需借助后端运行。",
    "DeepLearning.js不仅通过利用 WebGL 在 GPU 上执行计算大幅提高了速度，同时还能够执行完整全面的反向传播。在2018年3月，DeepLearn.js团队与TensorFlow团队合并，重命名为TensorFlow.js。",
    "浏览器环境在构建交互型应用方面有着天然优势，而端侧机器学习不仅可以分担部分云端的计算压力，也具有更好的隐私性，同时还可以借助 Node.js 在服务端继续使用 JavaScript 进行开发，这对于前端开发者而言非常友好。除了提供统一风格的术语和 API，TensorFlow 的不同扩展版本之间还可以通过迁移学习来实现模型的复用，或者在预训练模型的基础上来定制自己的深度神经网络。",
    "图7-1 TensorFlow.js架构",
    "TensorFlow.js架构如图7-1，在 TensorFlow.js 中可以使用底层Core API或最高级的Layers API在浏览器上开发模型，也能基于浏览器运行已训练的模型。例如在网页端训练一个模型来识别图片或语音，训练一个模型以新颖的方式玩游戏或构建一个能创造钢琴音乐的神经网络等。",
    "TensorFlow.js 支持 GPU 硬件加速。在 Node.js 环境中，如果有 CUDA 环境支持，或者在浏览器环境中有WebGL环境支持，那么TensorFlow.js可以使用硬件进行加速。",
    "Tensorflow.js 还有如下优势：",
    "Tensorflow.js 是开箱即用的开发库，开发者无需花精力去编写基础复杂的数学问题。",
    "由于可运行于浏览器，减少服务器的运算，提高服务器资源利用，增强客户端响应运算结果的速度。",
    "使用语言就是Javascript，前端工程师不需要学习其他后端语言，降低入门门槛。",
    "由于浏览器的 WebGL 可调用 GPU，所以 Tensorflow.js 会使用 GPU 加速模型的运算，提高运算效率。",
    "Node 和 Python 一样都是使用 C++编写的环境，所以在 Node 环境进行运算的速度目前与 Python 速度不相上下。",
    "Tensorflow.js 的模型可以跟 Python 等其他语言模型进行互转。",
    "浏览器可以很好可视化机器训练过程，同时浏览器可调用设备的摄像头、麦克风等增加机器学习的应用场景，让机器学习跟接近用户。",
    "7.1.2 TensorFlow.js 的核心概念",
    "TensorFlow.js 不仅可以提供低级的机器学习构建模块，还可以提供高级的类似 Keras 的 API 来构建神经网络。",
    "在 TensorFlow.js 中可以通过两种方式创建机器学习模型：",
    "使用 Layers API（使用层构建模型）",
    "使用 Core API（借助低级运算，例如 tf.matMul()、tf.add() 等）",
    "TensorFlow.js为机器学习提供低级构建模块，以及构建神经网络的高级Keras Layers API。 下面简要介绍一些核心组件。",
    "张量(Tensor)",
    "TensorFlow.js 中的中心数据单元是张量（tensor）：一维或多维数组。一个 Tensor 实例的 shape 属性定义了其数组形状。",
    "Tensor 主要构造函数是 tf.tensor 函数：",
    "// 2x3 Tensor",
    "const shape = [2, 3]; // 2 rows, 3 columns",
    "const a = tf.tensor([1.0, 2.0, 3.0, 10.0, 20.0, 30.0], shape);",
    "a.print(); // print Tensor values",
    "// Output: [[1 , 2 , 3 ],",
    "//          [10, 20, 30]]",
    "// The shape can also be inferred:",
    "const b = tf.tensor([[1.0, 2.0, 3.0], [10.0, 20.0, 30.0]]);",
    "b.print();",
    "// Output: [[1 , 2 , 3 ],",
    "//          [10, 20, 30]]",
    "变量（Variable）",
    "变量用张量的值进行初始化。 然而，与张量不同的是，它们的值是可变的。 您可以使用assign方法为现有变量分配一个新的张量：",
    "const initialValues = tf.zeros([5]);",
    "const biases = tf.variable(initialValues); // initialize biases",
    "biases.print(); // output: [0, 0, 0, 0, 0]",
    "const updatedValues = tf.tensor1d([0, 1, 0, 1, 0]);",
    "biases.assign(updatedValues); // update values of biases",
    "biases.print(); // output: [0, 1, 0, 1, 0]",
    "操作（Ops）",
    "Tensor 可以用于保存数据，而操作则可用于操作数据。TensorFlow.js 提供了多种适用于张量的线性代数和机器学习运算的操作。由于 Tensor 是不可改变的，这些操作不会改变它们的值，而会返回新的 Tensor。这些运算不仅包含 add、sub 和 mul 等二元运算，同时还包括 square 等一元运算：",
    "const e = tf.tensor2d([[1.0, 2.0], [3.0, 4.0]]);",
    "const f = tf.tensor2d([[5.0, 6.0], [7.0, 7.0]]);",
    "const e_plus_f = e.add(f);",
    "e_plus_f.print();",
    "// Output: [[6 , 8 ],",
    "//          [10, 12]]",
    "const d = tf.tensor2d([[1.0, 2.0], [3.0, 4.0]]);",
    "const d_squared = d.square();",
    "d_squared.print();",
    "// Output: [[1, 4 ],",
    "//          [9, 16]]",
    "模型和层",
    "在 Tensorflow.js 有两种创建模型的方式：可以用高层API：Layers API来建立模型，也用Core API来搭建相同的模型。",
    "Layers API有两种方式创建模型：第一种是创建 sequential 模型，第二种是创建 functional 模型。",
    "Sequential 模型将网络的每一层简单的叠在一起。您可以将需要的层按顺序写在一个列表里，然后将列表作为 sequential() 函数的输入：",
    "const model = tf.sequential({",
    "layers: [",
    "tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),",
    "tf.layers.dense({units: 10, activation: 'softmax'}),",
    "]",
    "});",
    "也可以通过 tf.model() 来创建 LayersModel。可以用 tf.model() 来创建任何非闭环的计算图。以下是使用tf.model() API 建立和上文相同模型的列子：",
    "// 用apply()方法创建任意计算图",
    "const input = tf.input({shape: [784]});",
    "const dense1 = tf.layers.dense({units: 32, activation: 'relu'}).apply(input);",
    "const dense2 = tf.layers.dense({units: 10, activation: 'softmax'}).apply(dense1);",
    "const model = tf.model({inputs: input, outputs: dense2});",
    "在每一层用 apply() 将上一层的输出作为本层的输入。",
    "不同于 sequential model 使用 inputShape 来定义第一层的输入，用 tf.input() 创建的 SymbolicTensor 作为第一层的输入。",
    "Layers API 提供了大量方便的工具，例如权重初始化，模型序列化，训练监测，可迁移性和安全检查。当遇到如下情况时，可能会需要使用 Core API：",
    "需要更多灵活性和控制",
    "不需要序列化或可以创造自己的序列化方法",
    "用 Core API 写的模型包含了一系列的函数。这些函数以一个或多个张量作为输入，并输出另一个张量。可以用 Core API 来重写之前定义的模型：",
    "// The weights and biases for the two dense layers.",
    "const w1 = tf.variable(tf.randomNormal([784, 32]));",
    "const b1 = tf.variable(tf.randomNormal([32]));",
    "const w2 = tf.variable(tf.randomNormal([32, 10]));",
    "const b2 = tf.variable(tf.randomNormal([10]));",
    "function model(x) {",
    "return x.matMul(w1).add(b1).relu().matMul(w2).add(b2).softmax();",
    "}",
    "内存管理",
    "因为TensorFlow.js使用了GPU来加速数学运算，因此当tensorflow处理张量和变量时就有必要来管理GPU内存。在TensorFlow.js中，可以通过dispose 和 tf.tidy这两种方法来管理内存。",
    "可以在张量或变量上调用dispose来清除它并释放其GPU内存：",
    "const x = tf.tensor2d([[0.0, 2.0], [4.0, 6.0]]);",
    "const x_squared = x.square();",
    "x.dispose();",
    "x_squared.dispose();",
    "进行大量的张量操作时使用dispose可能会很麻烦。TensorFlow.js提供了另一个函数tf.tidy，它对JavaScript中的常规范围起到类似的作用，不同的是它针对GPU支持的张量。",
    "tf.tidy执行一个函数并清除所有创建的中间张量，释放它们的GPU内存。 它不清除内部函数的返回值。",
    "const average = tf.tidy(() => {",
    "const y = tf.tensor1d([1.0, 2.0, 3.0, 4.0]);",
    "const z = tf.ones([4]);",
    "return y.sub(z).square().mean();",
    "});",
    "average.print()",
    "使用tf.tidy将有助于防止应用程序中的内存泄漏。它也可以用来更谨慎地控制内存何时回收。",
    "7.1.2 TensorFlow.js 环境配置",
    "JavaScript项目中有两种主要的方式来获取TensorFlow.js：通过脚本标签（script tags）或从yarn（或者NPM）安装并使用Parcel，WebPack或Rollup等工具构建工程。如果您是 Web 开发新手，或者从未听说过诸如 Webpack 或 Parcel 的工具，建议您使用脚本代码。如果您比较有经验或想编写更大的程序，则可能值得使用构建工具进行探索。",
    "使用Script Tag",
    "在浏览器中加载 TensorFlow.js ，最方便的办法是在 HTML 中直接引用 TensorFlow.js 发布的 NPM 包中已经打包安装好的 JavaScript 代码。",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js\"></script>",
    "将下面的代码添加到HTML文件中，在浏览器中打开该HTML文件。",
    "<html>",
    "<head>",
    "<!-- Load TensorFlow.js -->",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js\"></script>",
    "<!-- Place your code in the script tag below. You can also use an external .js file -->",
    "<script>",
    "// Notice there is no 'import' statement. 'tf' is available on the index-page",
    "// because of the script tag above.",
    "console.log(tf.version.tfjs);",
    "const a = tf.tensor([[1, 2], [3, 4]]);",
    "console.log('shape:', a.shape);",
    "a.print();",
    "</script>",
    "</head>",
    "<body>",
    "</body>",
    "</html>",
    "摁下F12键打开开发人员工具，可以方便调试自己的代码。可随时在任何网页上使用 F12 工具，从而快速调试 JavaScript、HTML 和级联样式表 (CSS)，还可以跟踪并查明网页或网络的性能问题。网页运行结果如图7-2所示。",
    "图7-2 运行结果",
    "通过parcel打包执行",
    "服务器端使用 JavaScript ，首先需要按照 NodeJS.org 官网的说明，完成安装最新版本的 Node.js",
    "建立 TensorFlow.js 项目目录",
    "初始化项目管理文件 package.json",
    "$ yarn init",
    "yarn init v1.22.5",
    "question name (test):",
    "question version (1.0.0):",
    "question description: TensorFlow.js test",
    "question entry point (index.js):",
    "question repository url: index.html",
    "question author:",
    "question license (MIT):",
    "question private:",
    "success Saved package.json",
    "Done in 47.23s.",
    "在目录下创建两个文件，index.html,index.js",
    "在index.html中通过script标签引入index.js就可以了，在index.js中写一段简单的测试代码。",
    "index.html代码如下：",
    "<html>",
    "<body>",
    "<h4>TFJS example<hr/></h4>",
    "<div id=\"micro-out-div\">TensorFlow.js Test</div>",
    "<script src=\"./index.js\"> </script>",
    "</body>",
    "</html>",
    "index.js代码如下：",
    "import * as tf from '@tensorflow/tfjs'",
    "console.log(tf.version.tfjs)",
    "const shape = [2, 3]; // 2 rows, 3 columns",
    "const a = tf.tensor([1.0, 2.0, 3.0, 10.0, 20.0, 30.0], shape);",
    "a.print(); // print Tensor values",
    "修改package.json配置文件",
    "如果使用 JavaScript、或者曾经与 JavaScript 项目、Node.js 或前端项目进行过交互，则肯定会遇到过 package.json 文件。package.json 文件是项目的清单，它可以做很多完全互不相关的事情。它是用于工具的配置中心，也是 yarn 存储所有已安装软件包的名称和版本的地方。开发依赖是仅用于开发的程序包，在生产环境中并不需要。例如测试的软件包、webpack 或 Babel。",
    "{",
    "\"name\": \"test\",",
    "\"version\": \"1.0.0\",",
    "\"description\": \"TensorFlow.js test\",",
    "\"main\": \"index.js\",",
    "\"repository\": \"index.html\",",
    "\"license\": \"MIT\",",
    "\"engines\": {",
    "\"node\": \">=7.9.0\"",
    "},",
    "\"dependencies\": {",
    "\"@tensorflow/tfjs\": \"2.0.0\"",
    "},",
    "\"scripts\": {",
    "\"watch\": \"cross-env NODE_ENV=development parcel index.html --no-hmr --open\",",
    "\"build\": \"cross-env NODE_ENV=production parcel build index.html --no-minify --public-url ./\",",
    "\"link-local\": \"yalc link\"",
    "},",
    "\"devDependencies\": {",
    "\"@babel/core\": \"^7.0.0-0\",",
    "\"@babel/plugin-transform-runtime\": \"^7.1.0\",",
    "\"babel-preset-env\": \"~1.6.1\",",
    "\"clang-format\": \"~1.2.2\",",
    "\"cross-env\": \"^5.1.6\",",
    "\"parcel-bundler\": \"~1.12.5\",",
    "\"yalc\": \"~1.0.0-pre.22\"",
    "}",
    "}",
    "安装依赖",
    "运行yarn安装依赖。",
    "$  yarn",
    "yarn install v1.22.5",
    "info No lockfile found.",
    "[1/5] Validating package.json...",
    "[2/5] Resolving packages...",
    "warning babel-preset-env > browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.",
    "[3/5] Fetching packages...",
    "info fsevents@1.2.13: The platform \"win32\" is incompatible with this module.",
    "info \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.",
    "[4/5] Linking dependencies...",
    "warning \"@tensorflow/tfjs > @tensorflow/tfjs-data@2.0.0\" has unmet peer dependency \"seedrandom@~2.4.3\".",
    "[5/5] Building fresh packages...",
    "success Saved lockfile.",
    "Done in 194.90s.",
    "运行查看结果",
    "然后执行yarn watch来启动开发服务器。",
    "$  yarn watch",
    "yarn run v1.22.5",
    "$ cross-env NODE_ENV=development parcel index.html --no-hmr --open",
    "Server running at http://localhost:1234",
    "√  Built in 15.67s.",
    "接着在浏览器中打开该网址，查看结果。",
    "图7-3 运行结果",
    "7.2 任务1：预测汽车油耗效率",
    "这个项目是简单的线性回归的实验，用来预测汽车的油耗效率MPG，将使用一个小数据集和一个简单的模型，帮助大家熟悉使用TensorFlow.js进行训练模型的基本流程与概念和语法。",
    "首先创建一个使用TensorFlow.js在浏览器中训练模型的网页，然后给定汽车的功率（Horsepower），使用模型预测汽车油耗（MPG），具体流程如下：",
    "加载数据并准备进行训练；",
    "定义模型结构；",
    "训练模型，并监视其性能；",
    "评估模型。",
    "7.2.1 创建主页并加载数据",
    "建立一个 HTML 文件，在头信息中，通过将 NPM 模块转换为在线可以引用的免费服务 cdn.jsdelivr.net，来加载 @tensorflow/tfjs 和 @tensorflow/tfjs-vis 两个 TFJS 模块。tfjs-vis是TensorFlow.js进行浏览器可视化的一组实用工具库。HTML文件名为index.html，代码如下：",
    "<!DOCTYPE html>",
    "<html>",
    "<head>",
    "<title>TensorFlow.js Tutorial</title>",
    "<!-- Import TensorFlow.js -->",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js\"></script>",
    "<!-- Import tfjs-vis -->",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js\"></script>",
    "<!-- Import the main script file -->",
    "<script src=\"index.js\"></script>",
    "</head>",
    "<body>",
    "</body>",
    "</html>",
    "在与上面的HTML文件相同的文件夹中，创建一个名为index.js的文件，并将以下代码放入其中。",
    "async function getData() {",
    "const carsDataResponse = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');",
    "const carsData = await carsDataResponse.json();",
    "const cleaned = carsData.map(car => ({",
    "mpg: car.Miles_per_Gallon,",
    "horsepower: car.Horsepower,",
    "}))",
    ".filter(car => (car.mpg != null && car.horsepower != null));",
    "return cleaned;",
    "}",
    "async function run() {",
    "// Load and plot the original input data that we are going to train on.",
    "const data = await getData();",
    "const values = data.map(d => ({",
    "x: d.horsepower,",
    "y: d.mpg,",
    "}));",
    "tfvis.render.scatterplot(",
    "{name: 'Horsepower v MPG'},",
    "{values},",
    "{",
    "xLabel: 'Horsepower',",
    "yLabel: 'MPG',",
    "height: 300",
    "}",
    ");",
    "// More code will be added below",
    "}",
    "document.addEventListener('DOMContentLoaded', run);",
    "首先需要加载数据、并对数据格式化（进行预处理）和可视化要用于训练模型的数据。从服务端获取 JSON 文件中加载数据集。数据集中包含了关于每辆给定汽车的许多特性，例如MPG(油耗)、Cylinders(气缸数量)、Displacement(排气量)、Weight(车重)。然后提取有关Horsepower和MPG的数据作为训练数据。",
    "{",
    "\"Name\": \"chevrolet chevelle malibu\",",
    "\"Miles_per_Gallon\": 18,",
    "\"Cylinders\": 8,",
    "\"Displacement\": 307,",
    "\"Horsepower\": 130,",
    "\"Weight_in_lbs\": 3504,",
    "\"Acceleration\": 12,",
    "\"Year\": \"1970-01-01\",",
    "\"Origin\": \"USA\"",
    "},",
    "run()是项目的主函数，后面的功能将陆续添加在这里。通过 map 来获得将要进行训练的特性，通过 tfvis 将数据绘制成散点图。",
    "图7-4 tfvis绘制散点图",
    "为了避免阻塞整个程序的执行，可能耗时的函数应当尽量使用异步方式，也就是function getData()关键字之前的async。",
    "7.2.2 定义模型结构",
    "TensorFlow.js有两种创建模型的方式，一种是用的tf.sequential()，另外一种是tf.model()，两者的差别是tf.sequential()是一个线性堆叠layers的模型，而tf.model()定义的神经元网络层与层之间的关系较为随意。TensorFlow.js完整模仿了Keras的模型定义方式，下面代码是模型定义：",
    "function createModel() {",
    "// Create a sequential model",
    "const model = tf.sequential();",
    "// Add a single input layer",
    "model.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));",
    "// Add an output layer",
    "model.add(tf.layers.dense({units: 1, useBias: true}));",
    "return model;",
    "}",
    "因为数据比较简单，所以使用了两层全连接网络。只有功耗这一个输入值，所以输入的张量形状是[1]，输出的神经元数量也为1（油耗）。useBias是神经元权重计算中的偏置量，可以不用显式设为true。",
    "首先实例化一个tf. sequential对象，然后调用add方法为网络添加一个输入层，该输入层将自动连接到具有一个隐藏单元的dense层。inputShape形状为[1]，因为有1个数字作为输入（即给定汽车的功率）。最后再添加一个输出dense层，units为1（即输出为一个数字，油耗）。",
    "模型定义完成后，需要在run()函数中添加调用，并调用可视化工具提供的modelSummary方法，将模型显示在浏览器中。",
    "// Create the model",
    "const model = createModel();",
    "tfvis.show.modelSummary({name: 'Model Summary'}, model);",
    "图7-5 模型各层的参数状况",
    "7.2.3 数据预处理",
    "在数据载入的时候需要进行预处理的工作，需要做数据规范化，并把转换为TensorFlow处理起来更高效的张量类型。",
    "JavaScript语言在大规模数据的处理上不如Python的高效，其中最突出的问题是内存的回收。用户对于浏览器的内存占用本身也是非常敏感的。TensorFlow.js为了解决这个问题，专门提供了tf.tidy()函数。使用方法是把大规模的内存操作，放置在这个函数的回调中执行。函数调用完成后，tf.tidy()得到控制权，进行内存的清理工作，防止内存泄露。",
    "function convertToTensor(data) {",
    "// Wrapping these calculations in a tidy will dispose any",
    "// intermediate tensors.",
    "return tf.tidy(() => {",
    "// Step 1. Shuffle the data",
    "tf.util.shuffle(data);",
    "// Step 2. Convert data to Tensor",
    "const inputs = data.map(d => d.horsepower)",
    "const labels = data.map(d => d.mpg);",
    "const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);",
    "const labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
    "//Step 3. Normalize the data to the range 0 - 1 using min-max scaling",
    "const inputMax = inputTensor.max();",
    "const inputMin = inputTensor.min();",
    "const labelMax = labelTensor.max();",
    "const labelMin = labelTensor.min();",
    "const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));",
    "const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
    "return {",
    "inputs: normalizedInputs,",
    "labels: normalizedLabels,",
    "// Return the min/max bounds so we can use them later.",
    "inputMax,",
    "inputMin,",
    "labelMax,",
    "labelMin,",
    "}",
    "});",
    "}",
    "convertToTensor函数首先tf.util.shuffle方法打乱数据集中数据顺序，创建特征向量inputTensor与标签向量labelTensor，将原始数据转变为tensorflow可读的张量格式。最后对输入和输出的数据做归一化操作（让输入输出映射到0-1之间），保证后期更有效地训练。",
    "7.2.4 训练与测试模型",
    "训练和测试的代码与TensorFlow非常类似，一样使用model.fit()做训练，以及model.predict()做预测。模型训练的过程和结果，可以使用TensorFLow-vis图表工具可视化出来，显示在浏览器中。其中训练部分是使用回调函数，目的是能够动态的显示训练的过程。",
    "async function trainModel(model, inputs, labels) {",
    "// Prepare the model for training.",
    "model.compile({",
    "optimizer: tf.train.adam(),",
    "loss: tf.losses.meanSquaredError,",
    "metrics: ['mse'],",
    "});",
    "const batchSize = 32;",
    "const epochs = 50;",
    "return await model.fit(inputs, labels, {",
    "batchSize,",
    "epochs,",
    "shuffle: true,",
    "callbacks: tfvis.show.fitCallbacks(",
    "{ name: 'Training Performance' },",
    "['loss', 'mse'],",
    "{ height: 200, callbacks: ['onEpochEnd'] }",
    ")",
    "});",
    "}",
    "模型优化算法使用adam，使用均方差作为判断训练结果的参数。训练模型采用分批采样训练，一次采样32条（batchSize）训练数据，遍历所有样本50次（epochs），shuffle设置为true，表示打乱数据集。最后设置了callback，可以在每一个训练周期显示训练情况。",
    "在run()函数添加训练代码，运行后结果如图：",
    "// Convert the data to a form we can use for training.",
    "const tensorData = convertToTensor(data);",
    "const {inputs, labels} = tensorData;",
    "// Train the model",
    "await trainModel(model, inputs, labels);",
    "console.log('Done Training');",
    "图7-6 每一个训练周期显示训练情况",
    "训练完成后，调用testModel()函数来预测油耗，代码如下:",
    "function testModel(model, inputData, normalizationData) {",
    "const {inputMax, inputMin, labelMin, labelMax} = normalizationData;",
    "// Generate predictions for a uniform range of numbers between 0 and 1;",
    "// We un-normalize the data by doing the inverse of the min-max scaling",
    "// that we did earlier.",
    "const [xs, preds] = tf.tidy(() => {",
    "const xs = tf.linspace(0, 1, 100);",
    "const preds = model.predict(xs.reshape([100, 1]));",
    "const unNormXs = xs",
    ".mul(inputMax.sub(inputMin))",
    ".add(inputMin);",
    "const unNormPreds = preds",
    ".mul(labelMax.sub(labelMin))",
    ".add(labelMin);",
    "// Un-normalize the data",
    "return [unNormXs.dataSync(), unNormPreds.dataSync()];",
    "});",
    "const predictedPoints = Array.from(xs).map((val, i) => {",
    "return {x: val, y: preds[i]}",
    "});",
    "const originalPoints = inputData.map(d => ({",
    "x: d.horsepower, y: d.mpg,",
    "}));",
    "tfvis.render.scatterplot(",
    "{name: 'Model Predictions vs Original Data'},",
    "{values: [originalPoints, predictedPoints], series: ['original', 'predicted']},",
    "{",
    "xLabel: 'Horsepower',",
    "yLabel: 'MPG',",
    "height: 300",
    "}",
    ");",
    "}",
    "调用tf.linspace()方法创建0~1之间平均分配的100个值，然后调用predict()方法预测。",
    "在run()函数添加调用代码，运行后结果如图7-7：",
    "testModel(model, data, tensorData);",
    "图7-7 预测结果",
    "7.3 任务2：手写数字识别",
    "下面将使用 CNN 构建一个 Tensorflow.js 模型来识别手写数字。首先训练分类器，让它查看数千个图像以及其标签，然后将使用模型从未见过的测试数据来评估分类器的准确性。",
    "7.3.1 从GitHub获取源码并运行",
    "Tensorflow.js在其示例官网https://github.com/tensorflow/tfjs-examples中已经公开了诸多的例子，mnist项目目录如图7-8：",
    "图7-8 mnist项目目录",
    "从GitHub克隆项目代码，以获取项目所需的HTML，JS文件和配置文件的副本。",
    "$ git clone https://github.com/tensorflow/tfjs-examples.git",
    "$ cd tfjs-examples/ mnist",
    "如图7-8项目包含三类文件。第一是HTML文件，文件主要包含页面的基本结构，命名为index.html，它包含一些div标签，一些UI元素以及一个源标签，以JavaScript代码插入例如index.js 。",
    "JS代码通常分为几个文件，以提高良好的可读性。用于更新可视化元素的代码位于ui.js中，而用于下载数据的代码位于data.js中。",
    "第三个重要文件类型是软件包配置文件package.json，这是npm软件包管理器。如果以前从未使用过npm 或yarn ，建议您在https://docs.npmjs.com/getting-started/what-is-npm上浏览一下npm“入门”文档，并逐渐熟悉以便能够构建并运行示例代码。下面将使用yarn作为包管理器。",
    "在mnist代码目录中包含一下文件:",
    "index.html ：HTML根文件，提供DOM根并调用JS脚本。",
    "index.js ：根文件，用于加载数据，定义模型，训练循环并指定UI元素。",
    "data.js ：实现下载和访问mnist数据集。",
    "ui.js ：用于更新可视化元素。",
    "package.json ：软件包配置文件，描述了构建和运行此示例所需的依赖项。",
    "使用yarn命令构建，运行mnist代码：",
    "$ yarn",
    "$ yarn watch",
    "如果您是Web 开发新手，或者从未听说过诸如 Webpack 或 Parcel 的工具，建议使用脚本代码。如果您比较有经验或想编写更大的程序，则可能值得使用构建工具进行探索。本项目将使用脚本代码实现相关功能。",
    "7.3.2 创建相关文件",
    "在同一目录下创建index.html文件，index.js文件，拷贝tfjs-examples/ mnist目录下data.js文件。index.html文件代码如下：",
    "<!DOCTYPE html>",
    "<html>",
    "<head>",
    "<meta charset=\"utf-8\">",
    "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">",
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
    "<title>TensorFlow.js Tutorial</title>",
    "<!-- Import TensorFlow.js -->",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js\"></script>",
    "<!-- Import tfjs-vis -->",
    "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js\"></script>",
    "<!-- Import the data file -->",
    "<script src=\"data.js\" type=\"module\"></script>",
    "<!-- Import the main script file -->",
    "<script src=\"index.js\" type=\"module\"></script>",
    "</head>",
    "<body>",
    "</body>",
    "</html>",
    "data.js实现了预处理数据，其功能与之前讲解的Python代码类似。其中包含了MnistData类，从MNIST数据集中随机批量提取MNIST图像。",
    "MnistData将整个数据集分为训练数据和测试数据。当训练模型时，分类器将使用训练集进行训练。在评估模型时，使用测试集中的数据，以检查模型对新数据的泛化情况。",
    "MnistData有两个public方法：",
    "nextTrainBatch（batchSize）：从训练集中返回一批随机图像及其标签。",
    "nextTestBatch（batchSize）：从测试集中返回一批图像及其标签。",
    "在训练MNIST分类器时，为了模型的预测将不受图像的顺序的影响，随机打乱数据集是非常重要的。例如，如果首先将所有1位数字提供给模型，那么在此阶段的训练中，模型可能会学会简单地预测1。如果我们只给模型提供2，它可能会简单地转换到仅预测2，并且从不预测1。",
    "在index.js文件中添加一下代码加载数据集并显示20张图片，如图7-9，代码如下：",
    "图7-9 显示20张图片",
    "import {MnistData} from './data.js';",
    "async function showExamples(data) {",
    "// Create a container in the visor",
    "const surface =",
    "tfvis.visor().surface({ name: 'Input Data Examples', tab: 'Input Data'});",
    "// Get the examples",
    "const examples = data.nextTestBatch(20);",
    "const numExamples = examples.xs.shape[0];",
    "// Create a canvas element to render each example",
    "for (let i = 0; i < numExamples; i++) {",
    "const imageTensor = tf.tidy(() => {",
    "// Reshape the image to 28x28 px",
    "return examples.xs",
    ".slice([i, 0], [1, examples.xs.shape[1]])",
    ".reshape([28, 28, 1]);",
    "});",
    "const canvas = document.createElement('canvas');",
    "canvas.width = 28;",
    "canvas.height = 28;",
    "canvas.style = 'margin: 4px;';",
    "await tf.browser.toPixels(imageTensor, canvas);",
    "surface.drawArea.appendChild(canvas);",
    "imageTensor.dispose();",
    "}",
    "}",
    "async function run() {",
    "const data = new MnistData();",
    "await data.load();",
    "await showExamples(data);",
    "}",
    "document.addEventListener('DOMContentLoaded', run);",
    "通过搭建本地一个服务器去进行资源的问题来解决跨域问题，例如使用Web Server for Chrome，如图7-10。否则会报如下错误：",
    "Access to script at 'file:///E:/mnist/data.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.",
    "图7-10 Web Server for Chrome",
    "7.3.3 定义模型结构",
    "我们已经知道MNIST数据集的神经网络采用什么样的输入，以及它应该生成什么样的输出。神经网络的输入张量形状为[null，28，28，1]，输出张量形状为[null，10]，其中第二维度对应于十个可能的数字。下面将定义一个卷积图像分类模型，将使用Sequential模型，其中张量将连续地从一层传递到下一层。",
    "在index.js文件中添加以下代码：",
    "function getModel() {",
    "const model = tf.sequential();",
    "const IMAGE_WIDTH = 28;",
    "const IMAGE_HEIGHT = 28;",
    "const IMAGE_CHANNELS = 1;",
    "// In the first layer of our convolutional neural network we have",
    "// to specify the input shape. Then we specify some parameters for",
    "// the convolution operation that takes place in this layer.",
    "model.add(tf.layers.conv2d({",
    "inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS],",
    "kernelSize: 5,",
    "filters: 8,",
    "strides: 1,",
    "activation: 'relu',",
    "kernelInitializer: 'varianceScaling'",
    "}));",
    "// The MaxPooling layer acts as a sort of downsampling using max values",
    "// in a region instead of averaging.",
    "model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [2, 2]}));",
    "// Repeat another conv2d + maxPooling stack.",
    "// Note that we have more filters in the convolution.",
    "model.add(tf.layers.conv2d({",
    "kernelSize: 5,",
    "filters: 16,",
    "strides: 1,",
    "activation: 'relu',",
    "kernelInitializer: 'varianceScaling'",
    "}));",
    "model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [2, 2]}));",
    "// Now we flatten the output from the 2D filters into a 1D vector to prepare",
    "// it for input into our last layer. This is common practice when feeding",
    "// higher dimensional data to a final classification output layer.",
    "model.add(tf.layers.flatten());",
    "// Our last layer is a dense layer which has 10 output units, one for each",
    "// output class (i.e. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9).",
    "const NUM_OUTPUT_CLASSES = 10;",
    "model.add(tf.layers.dense({",
    "units: NUM_OUTPUT_CLASSES,",
    "kernelInitializer: 'varianceScaling',",
    "activation: 'softmax'",
    "}));",
    "// Choose an optimizer, loss function and accuracy metric,",
    "// then compile and return the model",
    "const optimizer = tf.train.adam();",
    "model.compile({",
    "optimizer: optimizer,",
    "loss: 'categoricalCrossentropy',",
    "metrics: ['accuracy'],",
    "});",
    "return model;",
    "}",
    "首先用tf.sequential实例化Sequential模型，然后为它添加层。",
    "添加第一层",
    "第一层是一个二维卷积层。 卷积在图像上滑动滤波器窗口以学习空间不变的变换（即，图像不同部分的图案或目标将以相同方式处理）。",
    "使用tf.layers.conv2d来创建二维卷积层，它接受一个定义层结构的配置对象作为输入：",
    "model.add(tf.layers.conv2d({",
    "inputShape: [28, 28, 1],",
    "kernelSize: 5,",
    "filters: 8,",
    "strides: 1,",
    "activation: 'relu',",
    "kernelInitializer: 'VarianceScaling'",
    "}));",
    "配置对象中的参数说明如下：",
    "inputShape：将流入模型第一层的数据的形状。MNIST样本是28x28像素的黑白图像。图像数据的规范格式是[row，column，depth]，所以形状是[28,28,1]。",
    "kernelSize：应用于输入数据的滑动卷积滤波器窗口的大小。设置kernelSize为5，表示一个5x5的正方形卷积窗口。",
    "Filters：应用于输入数据，大小为kernelSize的滤波器窗口的数量。",
    "Strides：滑动窗口的步长，即每次在图像上移动时，滤波器将移动多少个像素。指定步幅为1，这意味着过滤器将以1像素为单位滑过图像。",
    "Activation：卷积完成后应用于数据的激活函数，设置为ReLU函数。",
    "kernelInitializer：用于随机初始化模型权重的方法。",
    "添加第二层",
    "为模型添加第二层：最大池化层，使用 tf.layers.maxPooling2d创建它，该层将通过计算每个滑动窗口的最大值来缩减卷积结果的大小：",
    "model.add(tf.layers.maxPooling2d({",
    "poolSize: [2, 2],",
    "strides: [2, 2]",
    "}));",
    "参数说明如下：",
    "poolSize：应用于输入数据的滑动窗口大小。设置poolSize为[2,2]，池化层将对输入数据应用2x2窗口。",
    "Stride：滑动窗口的步长。",
    "由于poolSize和strides都是2×2，所以池窗口将完全不重叠。这意味着池化层会将前一层的激活图的大小减半。",
    "添加剩余层",
    "重复使用层结构是神经网络中的常见模式。添加第二个卷积层到模型，并在其后添加池化层。在第二个卷积层中，将滤波器数量从8增加到16。没有指定inputShape，因为它可以从前一层的输出形状中推断出来。",
    "接下来添加一个 flatten层，将前一层的输出平铺到一个向量中。",
    "最后添加一个 dense层，它将执行最终的分类。 在dense层前先对卷积+池化层的输出执行flatten也是神经网络中的另一种常见模式。",
    "定义优化器",
    "将使用自适应矩估计（Adam）优化器，Adam 算法是一种对随机目标函数执行一阶梯度优化的算法，该算法基于适应性低阶矩估计。",
    "编译模型",
    "编译模型时需要传入一个由优化器，损失函数和一系列评估指标组成的配置对象。损失函数使用常用于优化分类任务的交叉熵（ categoricalCrossentropy）。 categoricalCrossentropy 度量模型的最后一层产生的概率分布与标签给出的概率分布之间的误差，这个分布在正确的类标签中为1（100％）。",
    "对于评估指标，将使用准确度，该准确度衡量所有预测中正确预测的百分比。",
    "模型各层的参数状况如图7-11：",
    "图7-11 模型各层的参数",
    "7.3.4 训练模型",
    "现在已经成功地定义了模型的拓扑结构，下一步就是训练并评估训练的结果。在index.js文件中添加以下代码：",
    "async function train(model, data) {",
    "const metrics = ['loss', 'val_loss', 'acc', 'val_acc'];",
    "const container = {",
    "name: 'Model Training', tab: 'Model', styles: { height: '1000px' }",
    "};",
    "const fitCallbacks = tfvis.show.fitCallbacks(container, metrics);",
    "const BATCH_SIZE = 512;",
    "const TRAIN_DATA_SIZE = 5500;",
    "const TEST_DATA_SIZE = 1000;",
    "const [trainXs, trainYs] = tf.tidy(() => {",
    "const d = data.nextTrainBatch(TRAIN_DATA_SIZE);",
    "return [",
    "d.xs.reshape([TRAIN_DATA_SIZE, 28, 28, 1]),",
    "d.labels",
    "];",
    "});",
    "const [testXs, testYs] = tf.tidy(() => {",
    "const d = data.nextTestBatch(TEST_DATA_SIZE);",
    "return [",
    "d.xs.reshape([TEST_DATA_SIZE, 28, 28, 1]),",
    "d.labels",
    "];",
    "});",
    "return model.fit(trainXs, trainYs, {",
    "batchSize: BATCH_SIZE,",
    "validationData: [testXs, testYs],",
    "epochs: 10,",
    "shuffle: true,",
    "callbacks: fitCallbacks",
    "});",
    "}",
    "开始训练前先定义需要监视的指标，['loss', 'val_loss', 'acc', 'val_acc']分别表示训练集的准确度和损失值、以及验证集的准确度和损失值。 验证集的最大作用是方便我们了解模型效率、调试超参数。",
    "trainXs是训练集，将用这个训练集训练模型，testXs是验证集，在每个时期结束时对模型进行测试，在训练过程中，验证集中的数据永远不能用于训练。",
    "数据集需要调整为模型期望的形状，调整后的形状为[num_examples，image_width，image_height，channels]，然后再将它们输入模型。 对于每个数据集，都有输入（Xs）和标签（Ys）。",
    "model.fit调用指定BATCH_SIZE 设置为512，每次批量处理512个图像，MNIST 数据集中单个图像的维度为[28,28,1]，意味数据的实际形状是[512,28,28,1]。",
    "一般而言，使用较大的批次与较小的批次相比好处是，它对模型的权重产生了更一致且变化较小的渐变更新。在优化过程中，只能在对多个样本中的梯度进行平均后更新内部参数。这有助于避免因错误的样本（例如错误标记的数字）而改向错误的方向。但批次越大，训练期间就需要更多的内存。在给定相同数量的训练数据的情况下，较大的批次大小会导致每个时期的梯度更新数量较少。如果使用较大的批次，请确保相应地增加epochs，以免在训练过程中无意中减少了权重更新的次数。",
    "model.fit 设置验证集validationData为[testXs, testYs]。在训练期间需要验证损失和准确性，了解模型是否以及何时过度拟合。",
    "model.fit是异步函数，因此如果后续操作依赖于fit调用的完成，则需要对其使用await。需要在模式训练后使用测试数据集对模型执行评估。",
    "在index.js文件run函数中添加以下代码：",
    "const model = getModel();",
    "tfvis.show.modelSummary({name: 'Model Architecture', tab: 'Model'}, model);",
    "await train(model, data);",
    "图7-12 训练曲线",
    "图7-12 MNIST模型训练曲线，执行10个周期，每个周期由大约110批次组成。训练集和验证集的值由不同的颜色符号显示。经过10个阶段的训练，最终得到的评价准确率为95.0%。",
    "7.3.4 使用模型进行评估与预测",
    "现在已经有一个训练有素的模型。如何评估它的性能以及使用它来对手写数字的图像进行真正的分类？",
    "评估性能代码如下, 请在index.js文件中添加以下代码:",
    "const classNames = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];",
    "function doPrediction(model, data, testDataSize = 500) {",
    "const IMAGE_WIDTH = 28;",
    "const IMAGE_HEIGHT = 28;",
    "const testData = data.nextTestBatch(testDataSize);",
    "const testxs = testData.xs.reshape([testDataSize, IMAGE_WIDTH, IMAGE_HEIGHT, 1]);",
    "const labels = testData.labels.argMax(-1);",
    "const preds = model.predict(testxs).argMax(-1);",
    "testxs.dispose();",
    "return [preds, labels];",
    "}",
    "async function showAccuracy(model, data) {",
    "const [preds, labels] = doPrediction(model, data);",
    "const classAccuracy = await tfvis.metrics.perClassAccuracy(labels, preds);",
    "const container = {name: 'Accuracy', tab: 'Evaluation'};",
    "tfvis.show.perClassAccuracy(container, classAccuracy, classNames);",
    "labels.dispose();",
    "}",
    "async function showConfusion(model, data) {",
    "const [preds, labels] = doPrediction(model, data);",
    "const confusionMatrix = await tfvis.metrics.confusionMatrix(labels, preds);",
    "const container = {name: 'Confusion Matrix', tab: 'Evaluation'};",
    "tfvis.render.confusionMatrix(container, {values: confusionMatrix, tickLabels: classNames});",
    "labels.dispose();",
    "}",
    "准备500张图片作为测试集，调用model.predict预测结果，可以稍后增加测试集以在更大的测试集上进行测试。",
    "模型为每个类输出一个概率，argMax函数提供了最高概率类的索引，找出最大的概率，并指定使用它作为预测。",
    "run函数中添加以下代码开始预测。",
    "await showAccuracy(model, data);",
    "await showConfusion(model, data);",
    "通过预测结果和标签，可以计算每个类的准确度，结果如图。",
    "图7-12 每个类别的准确度",
    "使用tfvis.metrics.confusionMatrix绘制混淆矩阵如图7-13所示，混淆矩阵又称为可能性表格或是错误矩阵。它是一种特定的矩阵用来呈现算法性能的可视化效果，通常用于监督学习，非监督学习通常用匹配矩阵（matching matrix）。其每一列代表预测值，每一行代表的是实际的类别。这个名字来源于它可以非常容易的表明多个类别是否有混淆。",
    "图7-13 混淆矩阵",
    "习题与练习",
    "TensorFlow官网提供了很多在您项目中开箱即用的 TensorFlow.js 预训练模型，例如图像分类、对象检测、姿势估计、文本恶意检测等。同时提供了很多演示项目，例如会学习的机器、Node.js高音预测等，请参见 https://tensorflow.google.cn/js/demos?hl=zh_cn。",
    "“剪刀石头布”是大家小时候经常玩的游戏，日常生活中做一些纠结的决策，有时候也常常使用这种规则得出最后的选择，人能很轻松地认知这些手势，“石头”呈握拳状，“布”掌心摊开，“剪刀”食指和中指分叉，如何让机器识别这些手势呢？",
    "本项目任务要求使用TensorFlow.js实现根据摄像头采集的手势图像来确定它代表剪刀、石头、布中的哪一个。",
    "Laurence Moroney提供了大量的优秀数据，其中也包括剪刀、石头、布手势的图像。数据集链接地址：",
    "http://www.laurencemoroney.com/rock-paper-scissors-dataset/",
    "这是图像分类任务，所需工作任务包括数据图像的采集、模型的训练、参数的调整，最终得到模型文件（如：VGG、ResNet等），并在网页端部署，最后使用网络摄像头检查自己做出的代表石头剪刀布的手势图像。",
    "下面介绍一下Tenzeflow.js的架构",
    "Tenzeflow.js包含Kore API 与Layer API 两部门",
    "可以使用底层Kore API或最高级的Layer API在流览器上开发模型",
    "也能基于流览器运行以讯电的模型",
    "Layer API提供了更高层的API接口",
    "提供了类似于Korealist的余法机构",
    "提供高力度的抽象让开发人员使用加拿斯锤的更变节来开发机器学习模型",
    "Kore API 来处理底层代码",
    "在Kore API 之上编写的Layer API",
    "Kore API 则使用加拿斯锤的提供的Tenzeflow和新功能",
    "比如说Tenzeflow的Tenze的创建数据的运算内存管理等等",
    "此外Kore API 还提供了工具将拍审中的继续学习模型",
    "转换成Tenzeflow 可以或者是流览器可以使用的JSON格式",
    "Tenzeflow.js 支持GPU硬件加速",
    "在Note.js 环境中如果有CUDA 环境支持",
    "或者在流览器环境中有WebGL 环境支持",
    "那么Tenzeflow.js 可以使用硬件进行加速",
    "加拿斯锤的项目中有两种主要的方式来获取Tenzeflow.js",
    "通过脚本标签或从样子安装并使用",
    "Parsel Webpack或Roughup等工具够近工程",
    "如果是Web开发新手或者从未听说过",
    "主要的Webpack或Parsel工具建议使用脚本代",
    "如果已经比较有经验或者想编写更大的程序",
    "那么值得使用够减工具进行探索",
    "在流览器中加载Tenzeflow.js 最方便的办法",
    "是在HTML中直接引用Tenzeflow.js 发布的NPM包中",
    "已经打包安装好的加Warscred的代码",
    "为了能够用加Warscred 够减机器学习模型",
    "需要在Head标签中通过Strept标签",
    "来将Tenzeflow.js 文件从CDN 服务器上下载下来",
    "这个代码中SRC 属性给出了CDN 文件的具体地址",
    "CDN 文件地址是Tenzeflow官网公布的",
    "我们是否正确地引用了正确的库文件地址",
    "如何判断呢",
    "可以在Clown 流览器中按下F12 键",
    "打开开发人员工具可以方便调试自己的代码",
    "可以在控制台中输入Tef.warshen 查看是否正确地输出版本信息",
    "可随时使用Clown 流览器的开发人员工具",
    "从而快速调试加Warscred HTML和极廉样式表",
    "还可以跟踪并查明网页或网络的性能问题",
    "下面我们在Clown 流览器的控制台演示一下",
    "看一下具体操作流程",
    "数据都存放在Tenze 数据结构中",
    "Tenze 是Tenze 幅漏.gs中的中心数据单元",
    "如何理解Tenze呢",
    "Tenze 就是一个一为或多为数损",
    "Tenze 有几个关键的属性",
    "Six 属性定义了其数损形状",
    "Runk 定义张量包含的为数",
    "这里有两个例子",
    "第一个例子通过长量定义了一个22的二为数据",
    "第二个例子输入是一为数据",
    "通过Safe 参数定义张量的形状是22",
    "下面我们在Clown 流览器的控制台演示一下",
    "看一下两个变量的反回值是否相同",
    "Tenze 幅漏.gs 提供了多种诗用于张量的现形代数和机器学习运算的操作",
    "由于Tenze 是不可改变的",
    "这些操作不会改变他们的值",
    "而会返回新的Tenze",
    "这些运算不仅包含F-2的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "而会运算的确实",
    "这些运算不仅包含F-2的Sab",
    "和M-2的确实",
    "而会运算",
    "同时还包括S-2的依远运算",
    "第一个例子对Tenze中的所有元素",
    "执行X频缝计算",
    "第二个例子对两个Tenze的元素执行",
    "主元素相加",
    "下面我在Crowme榴末机的控制台演示",
    "下面我在Crowme榴末机的控制台演示一下",
    "看一下变量的反回值",
    "这些运算的确实",
    "要不然我们现在看不出来",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "再看一看",
    "ThanThanFlow.gts是一个用于使用加娃Squript进行机器学习开发的库",
    "用于在流览器和Note.gts讯论和部署机器学习模型",
    "ThanThanFlow.gts支持使用加娃Squript在流览器端部署",
    "也与微信小程序有很好的机程",
    "ThanThanFlow.gts支持所有Pyson可以加载的模型",
    "在Note.gts环境中直接通过调言API即可",
    "在流览器环境中需要转换为流览器支持的JSON格式",
    "ThanThanFlow.gts提供了一系列预讯论好的模型",
    "包括图像识别 余音识别 人体姿态识别 物体识别 文字分类等",
    "在这个项目中我们将通过预测汽车油耗效率",
    "首写数字识别 两个实力演示如何使用ThanThanFlow.gts进行ThanThanFlow模型的开发讯认和部署",
    "体验ThanThanFlow.gts直接在流览器加载ThanThanFlow",
    "通过本地CPU或者GPU资源进行所需的机器学习运算",
    "灵活的进行各种AI应用的开发",
    "我们将学习ThanThanFlow.gts的优点",
    "ThanThanFlow.gts的体系价格以及相关概念",
    "学习ThanThanFlow.gts环境配置",
    "在流览器中使用ThanThanFlow.gts",
    "能在Note.gts中使用ThanThanFlow.gts",
    "能通过Layer's API, call API,创建模型",
    "能熟练模型部署开发相应AI应用",
    "ThanThanFlow.gts是一个开源机器学习库",
    "可运行在加娃Scrept",
    "可以运行的任何位置",
    "它基于使用Pyson编写的原始ThanThanFlow.gts",
    "直在为加娃Scrept生态系统",
    "打造这种开发者体验和移系列API",
    "建于加娃Scrept的可移植性",
    "我们可以使用一种语言编写",
    "并在以下所有平台上轻松直行机器学习",
    "使用原版加娃Scrept的网络流览器中的客户端",
    "使用Note.gts进行服务器端",
    "甚至是RESPERBELRY, PII等IOT设备",
    "使用Electron的装面应用",
    "使用React Native的原生移动应用",
    "ThanThanFlow.gts还支持在每个环境中使用多个后端",
    "例如可以在CPU或WebGL中",
    "直行的实际基于硬件的环境",
    "使出的后端并不意味着服务器端环境",
    "以确保肩容性并保持运行速度",
    "在2017年,一个叫Dip Learning.gts的项目诞生了",
    "这是一款基于WebGL加速的开放原带马",
    "加娃Scrept机器学习库",
    "该库可以直接在流览器中运行",
    "而无需进行安装",
    "也无需借助后端运行",
    "在2018年3月,Dip Learning.gts团队与ThanThanFlow团队合并",
    "从命名为ThanThanFlow.gts",
    "ThanThanFlow.gts可以让我们直接在流览器中加载ThanThanFlow",
    "让用户立即通过本地的CPU或GPU资源进行我们所需要的机器学习运算",
    "更灵活的进行AI应用的开发",
    "流览器中进行机器学习",
    "相比于服务计端来讲由以下施打优势",
    "一,不需要安装软件或驱动",
    "打开流览器即可使用",
    "二,可以通过流览器进行更加方便的人机交互",
    "三,可以通过手机流览器",
    "调用手机硬件的各种传感器",
    "例如GPS,身上头等等",
    "似,用户的数据可以无需上传的服务器",
    "在本地即可完成所需操作",
    "官网有很多ThanThanFlow.gts是构建的势力和债线演示",
    "例如在网页端讯练一个模型来识别图片或语音",
    "讯练一个模型以新影的方式玩游戏",
    "我构建一个能创造钢琴音乐的神经网络的",
    "谷歌推出的AI小程序",
    "参画小歌在朋友圈风黄刷屏",
    "现在谷歌AI又有了更有趣的打开方式",
    "WooMeghr可以将你的姿势与同一姿势的其他人的图像相匹配",
    "利用机器来捕捉人类的动作",
    "然后跟8万多幅图像进行比对收索",
    "找出与人类动作一致的图像",
    "在机器学习中,模型是一个带游可学习参数的含书。",
    "可将输入硬设置输出。",
    "通过在数据上训练模型,获得最佳参数。",
    "训练好的模型可以提供从输入到所需输出的准确硬设。",
    "在Tensheveflow.gs中,",
    "我们可以通过两种方式创建机器学习模型。",
    "使用Layer's API使用Core API。",
    "Layer's API有两种方式创建模型,",
    "第一种是创建起困手模型。",
    "第二种是创建Functional模型。",
    "起困手模型将网路的每一层简单的跌在一起。",
    "我们可以将需要的程按讯许起在一个列表中。",
    "然后将列表作为CoreHansu的输入。",
    "也可以通过TF.model来创建Layer's model。",
    "可以用TF.model来创建任何非必还的计算图。",
    "以下是使用TF.model API建立和上文相同模型的例子。",
    "在每一层中,用Apply将上一层的输出作为本层的输入。",
    "不同于CoreHansu model使用InputSafe来定义第一层的输入。",
    "用TF.model的创建的Semmolic Tensheve作为第一层的输入。",
    "Layer's API提供了大量方便的工具,",
    "例如权中出实化,模型续练化,",
    "细练监测可签一性和安全检查。",
    "当遇到如下层矿时,可能会需要使用Core API。",
    "1.需要更多灵火性和控制,",
    "2.不需要系列化,我可以创造自己的系列化方法。",
    "使用WebGL后端时必须显示管理TF.tensheve内存。",
    "在TensheveVLO.gf中可以通过Dispose和TF.tidy这两种方法来管理内存。",
    "要消贵TF.tenshe的内存可以使用Dispose方法或TF.dispose。",
    "进行大量的张量操作时使用Dispose可能会很麻烦。",
    "TensheveVLO.gf提供了另一个韩束TF.tidy。",
    "它对加了Scrape中常规范围起到类似的作用。",
    "不同的是它针对GPU支持的张量。",
    "TF.tidy執行一个韩束并清楚所有创建的中间张量。",
    "释放他们的GPU内存,它不清楚内部韩束的反回纸。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法,它不需要重新的动作。",
    "TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "在TensheveVLO.gf中的张量操作时使用Dispose方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy。",
    "它对加了AV的方法或TF.tidy.",
    "汽车MPG意味汽车的友号",
    "是每家轮可以跑多少英里的一个数据",
    "每家轮约等于3.785升",
    "而每英里约等于1.61千米",
    "红阳的是一辆汽车在一家轮燃油的情况下能走多远",
    "汽车MPG的数据建模受到汽光数、加速度、马力、排量、重量等影响",
    "在世界各地汽车使用非常普遍的情况下",
    "消费者有时会考虑购买之前想购买汽车的效率和燃油经济型",
    "每个人都想买一辆能行使很远、耗油更少的车",
    "这个项目是简单的现性回归的实验",
    "用来预测汽车的油耗效率MPG",
    "将使用一个小数据级和一个简单的模型",
    "帮助大家熟悉使用Thensaflow.gs进行训练模型的基本流程与概念和语法",
    "我们首先创建一个使用Thensaflow.gs",
    "在流暖器中训练模型的网页",
    "然后给定汽车的功率",
    "使用模型预测汽车油耗具体流程一下",
    "第一步 需要加载数据",
    "并对数据格式化和可式化",
    "要用于训练模型的数据",
    "第二步定义一个现性回归模型",
    "使用其他变量预测输出变量",
    "现性回归是一种广泛用于建模和理解现实世界现象的技术",
    "它一于使用和直观理解",
    "在简单现性回归中模型只是一条直线",
    "而对于多元回归模型可以是多像是或评厌",
    "第三步 训练模型并监视其性能",
    "第四步 评估模型",
    "建立一个HTML文件 文件名为indepth.html",
    "在投信系中通过将NPM模块转换为再线可以引用的免费服务",
    "CDN.js-deliver.night",
    "来加载TFGS和TFGS-WARS两个模块",
    "TFGS-WARS是tensurve-low.js进行牛软器可视化的一组实用工具库",
    "在投信系中通过实用NPM模块转换为再线可以引用的免费服务",
    "CDN.js-deliver.night",
    "来加载TFGS和TFGS-WARS两个模块",
    "TFGS-WARS是tensurve-low.js进行牛软器可视化的一组实用工具库",
    "在于上面的HTML文件相同的文件假中",
    "创建一个名为indepth.js的文件 并将以下代码放入其中",
    "首先 需要加载数据 并对数据格视化和可视化",
    "要用于训练模型的数据",
    "从服务端或取Json文件中加载数据级",
    "数据级中包含了关于每量给定汽车的许多特性",
    "软韩数是项目的主韩数",
    "后面的功能将录序添加在这里",
    "通过MAP来获得将要进行训练的特性",
    "通过TFGS将数据会支撑3.2",
    "为了避免主策整个程序的执行",
    "可能耗试的韩数应当尽量使用 异补方式",
    "也就是FunctionGateData关键字之前的I'mSanite",
    "我们先读书据 其中这里边一个有9列",
    "他们分别都有对应的意义 例如MPG有号",
    "Solenders 器杆数量",
    "Displacement 排气量",
    "Wit 车众",
    "在我们可视化数据的时候",
    "我们会发现",
    "Original和Carding都是离散型的",
    "就没有选择他们进行一个现性活规模型的搭建",
    "除此之外 由于在HousePower中",
    "有一些值是存在问号",
    "我们就要选取那些不是问号的进行操作",
    "从3.2我们可以看出",
    "汽车的燃油效率与排量 重量 马力 反者都存在一定的现性关系",
    "其中汽车重量与燃油效率现性关系作为明显",
    "首先我们就利用HousePower一个单边量",
    "去构建现性回规模型 看看能否预测出来",
    "因為數據比較簡單,所以使用了兩層全連接網絡,只有功耗這一個輸入質,所以輸入的漲量形狀是1,輸出的神經元數量也唯一。",
    "UseBels是神經元全中計算中的偏質量,可以不用顯示,是唯處。",
    "Tancerflow.gf完整模仿了Carrots的模型定義方式,一種是用的TF.sequential,另外一種是TF.model。",
    "兩者的差別是TF.sequential是一個現性堆疊Layer的模型,而TF.model定義的神經網絡層一層之間的關係,較為隨意。",
    "首先實力化一個TF.sequential對象,然後調用APP的方法,為網絡添加一個輸入層。",
    "該輸入層將自動連接到具有隱藏單元的Dance.inputs.swip形狀唯一,因為有一個數字作為輸入,即給定汽車的功率。",
    "最後再添加一個輸出Dance.units,唯一,即輸出為一個數字由後。",
    "模型定義完成後,需要在亂含數中添加調用,並調用可視化工具提供的model Samaray方法,將模型顯示在流暖器中。",
    "在數據載入的時候,需要進行預出裡的工作。需要做數據規範化,並轉換為ThinSurf Low處理起來更高效的張亮類型。",
    "JavaSquarept語言,在大規模數據處理上,不如PASS很高效,其中最突出的問題是內存的回收。",
    "用戶對於流暖器的內存佔用,本身也是非常敏感的。",
    "ThinSurf Low.js為了解決這個問題,專門提供了TF.tid韓數。",
    "使用方法是把大規模的內存操作,放置在這個韓數的回調中執行。",
    "韓數調用完成後,TF.tid得到控制權,進行內存的清理工作,防止內存泄漏。",
    "首先,TF.youtube.shuffle方法,打亂數據集中數據順序。",
    "創建特徵項亮,InputThinSurf,與標籤項亮,LabelThinSurf。",
    "將原始數據轉變為ThinSurf Low可讀的張亮格式。",
    "最後,對輸入和輸出的數據,做規一化操作。保證後期更有效的訓練。",
    "訓練和測試的代碼與ThinSurf Low非常類似,一樣使用Model.fate韓數做訓練。",
    "以及Model.predict韓數做預測。",
    "模型訓練的過程和結果可以使用ThinSurf Low剛VIS圖表工具可視化出來。",
    "顯示在流覽器中,其中,訓練部分是使用毀掉韓數,目的是能夠動態的顯示訓練的過程。",
    "模型優化算法使用AdAM使用軍方差作為判斷訓練結果的參數。",
    "訓練模型採用分批採樣訓練,一次採樣32條訓練數據。",
    "便利所有樣本50次,Surf設置為處表示打亂數據級,最後設置了Coreback。",
    "可以在每一個訓練週期顯示訓練情況。",
    "在亂韓數,添加訓練代碼,可以看到最後的結果的分數,大約是0.69左右還是挺不錯的。",
    "剛剛我們是利用了單辨量的線性回歸模型。",
    "我們猜測,如果用多辨量的線性回歸模型,會不會更好呢?",
    "因為汽車的燃油效率與排量、重量、馬力、三者都存在一定的線性關係。",
    "同時可以考慮使用多個辨量,重新構建模型。",
    "项目8 TensorFlow Lite",
    "项目描述",
    "TensorFlow生态系统有着丰富的工具链，TensorFlow Serving是使用广泛的高性能的服务器端部署平台，TensorFlow.js支持使用JavaScript在浏览器端部署，TensorFlow Lite加速了端侧机器学习的发展，它支持Android、IOS、嵌入式设备、以及极小的MCU设备。全球超过40亿设备部署了TensorFlow Lite，谷歌、Uber、网易、爱奇艺、腾讯等公司的应用都使用了TensorFlow Lite。",
    "本项目为一个图像识别项目，基于TensorFlow Lite，优化MobileNet模型并在Android手机上实现识别四种花的种类，掌握如何通过相应工具将模型转化成适合手机设备的格式，并在Android应用中部署转换后的模型。",
    "项目目标",
    "知识目标",
    "了解TensorFlow Lite的发展历史",
    "了解TTensorFlow Lite的应用",
    "掌握TensorFlow Lite的整体架构",
    "掌握TensorFlow Lite转换器作用",
    "掌握FlatBuffers格式",
    "掌握TensorFlow Lite解释执行器特点及工作过程",
    "技能目标",
    "能通过相应工具将模型转化",
    "能在Android应用中部署转换后的模型",
    "能熟练Android Studio",
    "能配置build.gradle构建项目",
    "能熟练掌握迁移学习改造模型，开发相应AI应用",
    "8.1 认识TensorFlow Lite",
    "2015 年底Google 开源了端到端的机器学习开源框架 TensorFlow，它既支持大规模的模型训练，也支持各种环境的部署，包括服务器和移动端的部署，支持各种语言，包括 Python，C++，Java，Swift 甚至 Javascript。而近年来移动化浪潮和交互方式的改变，使得机器学习技术开发也在朝着轻量化的端侧发展，TensorFlow 团队又在 2017 年底上线了 TensorFlow Lite，一个轻量、快速、兼容度高的专门针对移动式应用场景的深度学习工具，把移动端及 IoT 设备端的深度学习技术的门槛再次大大降低。",
    "8.1.1 TensorFlow Lite发展历史",
    "TFLite是在边缘设备上运行TensorFlow模型推理的官方框架，它跨平台运行，包括Android、iOS以及基于Linux的IoT设备和微控制器。",
    "伴随移动和 IoT 设备的普及，世界以超乎想象的方式存在被连接的可能，如今已有超过 32 亿的手机用户和 70 亿的联网 IoT 设备。而随着手机成本不断降低，并且随着微控制器（MCU）和微机电系统（MEMs）的发展，高性能低功耗的芯片使得“万物”智能具有了可能性。Google开始了TF Mobile项目，尝试简化TensorFlow并在移动设备上运行，它是一个缩减版的TensorFlow，简化了算子集，也缩小了运行库。",
    "TFMini是Google内部用于计算机视觉场景的解决方案，它提供了一些转换工具压缩模型，进行算子融合并生成代码。它将模型嵌入到二进制文件中，这样就可以在设备上运行和部署模型。TFMini针对移动设备做了很多优化，但在把模型嵌入到实际的二进制文件中时兼容性存在较大挑战，因此TFMini并没有成为通用的解决方案。",
    "基于TF Mobile的经验，也继承了TFMini和内部其他类似项目的很多优秀工作，Google设计了TFLite：",
    "1) 更轻量。TensorFlow Lite 二进制文件的大小约为 1 MB（针对 32 位 ARM build）；如果仅使用支持常见图像分类模型（InceptionV3 和 MobileNet）所需的运算符，TensorFlow Lite 二进制文件的大小不到 300 KB。",
    "2) 特别为各种端侧设备优化的算子库。",
    "3) 能够利用各种硬件加速。",
    "8.1.2 TensorFlow Lite的应用",
    "全球有超过40亿的设备上部署着TFLite，例如Google Assistant，Google Photos等、Uber、Airbnb、以及国内的许多大公司如网易、爱奇艺和WPS等，都在使用TFLite。端侧机器学习在图像、文本和语音等方面都有非常广泛应用。",
    "TensorFlow Lite能解决的问题越来越多元化，这带来了应用的大量繁荣。在移动应用方面，网易使用TFLite做OCR处理，爱奇艺使用TFLite来进行视频中的AR效果，而WPS用它来做一系列文字处理。图像和视频方面广泛应用，比如Google Photos，Google Arts & Culture。",
    "离线语音识别方面有很多突破，比如Google Assistant宣布了完全基于神经网络的移动端语音识别，效果和服务器端十分接近，服务器模型需要2 GB大小，而手机端只需要80 MB。端侧语音识别非常有挑战，它的进展代表着端侧机器学习时代的逐步到来.一方面依赖于算法的提高，另外一方面TFLite框架的高性能和模型优化工具也起到了很重要的作用。Google Pixel 4手机上发布了Live Caption，自动把视频和对话中的语言转化为文字，大大提高了有听力障碍人群的体验。另外一方面，模型越来越小，无处不再，Google Assistant的语音功能部署在非常多元的设备上，比如手机端、手表、车载和智能音箱上，全球超过10亿设备。",
    "TFLite可以支持微控制器(MCU)，可以应用于IoT领域，MCU是单一芯片的小型计算机，没有操作系统，只有内存，也许内存只有几十KB。TFLite发布了若干MCU上可运行的模型，比如识别若干关键词的语音识别模型和简单的姿态检测模型，模型大小都只有20 KB左右，基于此可构建更智能的IoT应用，例如出门问问智能音箱使用TFLite来做热词唤醒，科沃斯扫地机器人使用TFLite在室内避开障碍物。如何让用户用更少的时间进行清扫工作是科沃斯不断追求的目标，它使用了机器视觉的帮助，可以识别这个过程中的一些障碍物，选择了用 TensorFlow Lite 部署深度神经网络，将推理速度提高了 30%，提高了用户的体验。",
    "TFLite也非常适合工业物联智能设备的开发，因为它很好地支持如树莓派及其他基于Linux SoC的工业自动化系统.创新奇智应用TFLite开发智能质检一体机、智能读码机等产品，应用到服装厂质检等场景",
    "8.2 TensorFlow Lite体系结构",
    "TensorFlow Lite 是一组工具，可帮助开发者在移动设备、嵌入式设备和 IoT 设备上运行 TensorFlow 模型。它支持设备端机器学习推断，延迟较低，并且二进制文件很小。",
    "8.2.1 TensorFlow Lite整体架构",
    "TensorFlow Lite 包括两个主要组件：",
    "TensorFlow Lite 解释器(Interpreter)",
    "TensorFlow Lite 转换器(Converter)",
    "算子库(Op kernels)",
    "硬件加速代理(Hardware accelerator delegate)",
    "TFLite采用更小的模型格式，并提供了方便的模型转换器，可将 TensorFlow 模型转换为方便解释器使用的格式，并可引入优化以减小二进制文件的大小和提高性能。比如SavedModel或GraphDef格式的TensorFlow模型，转换成TFLite专用的模型文件格式，在此过程中会进行算子融合和模型优化，以压缩模型，提高性能。",
    "TensorFlow Lite采用更小的解释器，可在手机、嵌入式 Linux 设备和微控制器等很多不同类型的硬件上运行经过专门优化的模型。安卓应用只需 1 兆左右的运行环境，在 MCU 上甚至可以小于 100KB。",
    "TFLite算子库目前有130个左右，它与TensorFlow的核心算子库略有不同，并做了移动设备相关的优化。",
    "在硬件加速层面，对于 CPU 利用了 ARM 的 NEON 指令集做了大量的优化。同时，Lite 还可以利用手机上的加速器，比如 GPU 或者 DSP等。另外，最新的安卓系统提供了 Android 神经网络 API（Android NN API)，让硬件厂商可以扩展支持这样的接口。",
    "图8-1展示了在TensorFlow 2.0中TFLite模型转换过程，用户在自己的工作台中使用TensorFlow API构造TensorFlow模型，然后使用TFLite模型转换器转换成TFLite文件格式(FlatBuffers格式)。在设备端，TFLite解释器接受TFLite模型，调用不同的硬件加速器比如GPU进行执行。",
    "图8-1 TFLite模型转换过程",
    "8.2.2 TensorFlow Lite转换器",
    "TFLite转换器可以接受不同形式的模型，包括Keras Model和SavedModel，开发者可以用tf.Keras或者低层级的TensorFlow API来构造TensorFlow模型，然后使用Python API或者命令行的方式调用转换器。例如：",
    "Python API",
    "调用tf.lite.TFLiteConverter，可用TFLiteConverter.from_saved_model()，或TFLiteConverter.from_keras_model()；",
    "命令行",
    "tflite_convert --saved_model_dir=width=5,height=17,dpi=110tmpwidth=5,height=17,dpi=110mobilenet_saved_model --output_file=width=5,height=17,dpi=110tmpwidth=5,height=17,dpi=110mobilenet.tflite",
    "转换器做了以下优化工作：",
    "算子优化和常见的编译优化，比如算子融合、常数折叠或无用代码删除等。TFLite实现了一组优化的算子内核，转化成这些算子能在移动设备上实现性能大幅度提升。",
    "量化的原生支持。在模型转换过程中使用训练后量化非常简单，不需要改变模型，最少情况只需多加一行代码，设置converter.optimizations=[tf.lite.Optimize.DEFAULT]。",
    "8.2.3 FlatBuffers格式",
    "TFLite模型文件格式采用FlatBuffers，更注重考虑实时性，内存高效，这在内存有限的移动环境中是极为关键的。它支持将文件映射到内存中，然后直接进行读取和解释，不需要额外解析。将其映射到干净的内存页上，减少了内存碎片化。",
    "TFLite代码中schema.fbs文件使用FlatBuffers定义了TFLite模型文件格式，关键样例代码如图8-2所示。TFLite模型文件是一个层次的结构：",
    "TFLite模型由子图构成，同时包括用到的算子库和共享的内存缓冲区。",
    "张量用于存储模型权重，或者计算节点的输入和输出，它引用Model的内存缓冲区的一片区域，提高内存效率。",
    "每个算子实现有一个OperatorCode，它可以是内置的算子，也可以是自定制算子，有一个名字。",
    "每个模型的计算节点包含用到的算子索引，以及输入输出用到的Tensor索引。",
    "每个子图包含一系列的计算节点、多个张量，以及子图本身的输入和输出。",
    "图8-2 TFLite schema.fbs样例代码",
    "8.2.4 TensorFlow Lite解释执行器",
    "TFLite解释执行器针对移动设备从头开始构建，具有以下特点:",
    "轻量级",
    "在32 b安卓平台下，编译核心运行时得到的库大小只有100 KB左右，如果加上所有TFLite的标准算子，编译后得到的库大小是1 MB左右。它依赖的组件较少，力求实现不依赖任何其他组件。",
    "快速启动",
    "既能够将模型直接映射到内存中，同时又有一个静态执行计划，在转换过程中基本上可以提前直接映射出将要执行的节点序列。采取了简单的调度方式，算子之间没有并行执行，而算子内部可以多线程执行以提高效率。",
    "内存高效",
    "在内存规划方面，采取了静态内存分配。当运行模型时，每个算子会执行prepare函数，它们会分配一个单一的内存块，而这些张量会被整合到这个大的连续内存块中，不同张量之间甚至可以复用内存以减少内存分配.",
    "使用解释执行器通常需要包含四步：",
    "加载模型",
    "将TFLite模型加载到内存中，该内存包含模型的执行图。",
    "转换数据",
    "模型的原始输入数据通常与所期望的输入数据格式不匹配.例如，可能需要调整图像大小，或更改图像格式，以兼容模型。",
    "运行模型推理",
    "使用TFLite API执行模型推理。",
    "解释输出",
    "解释输出模型推理结果，比如模型可能只返回概率列表，而我们需要将概率映射到相关类别，并将其呈现给最终用户。",
    "TFLite提供了多种语言的API，正式支持的有Java，C++和Python，实验性的包括C，Object C，C#和Swift。可以从头自己编译TFLite，也可以利用已编译好的库，Android开发者可以使用JCenter Bintray的TFLite AAR，而iOS开发者可通过CocoaPods在iOS系统上获取。",
    "8.3 任务1：TensorFlow Lite开发工作流程",
    "使用 TensorFlow Lite 的工作流程包括如下步骤，如图8-3：",
    "选择模型",
    "可以使用自己的 TensorFlow 模型、在线查找模型，或者从的TensorFlow预训练模型中选择一个模型直接使用或重新训练。",
    "转换模型",
    "如果使用的是自定义模型，请使用TensorFlow Lite转换器将模型转换为TensorFlow Lite 格式。",
    "部署到设备",
    "使用TensorFlow Lite解释器（提供多种语言的 API）在设备端运行模型。",
    "优化模型",
    "使用模型优化工具包缩减模型的大小并提高其效率，同时最大限度地降低对准确率的影响。",
    "图8-3 TensorFlow Lite 的工作流程",
    "8.3.1 选择模型",
    "TensorFlow Lite 允许在移动端（mobile）、嵌入式（embeded）和物联网（IoT）设备上运行 TensorFlow 模型。TensorFlow 模型是一种数据结构，这种数据结构包含了在解决一个特定问题时，训练得到的机器学习网络的逻辑和知识。",
    "有多种方式可以获得 TensorFlow 模型，从使用预训练模型（pre-trained models）到训练自己的模型。为了在 TensorFlow Lite 中使用模型，模型必须转换成一种特殊格式。TensorFlow Lite 提供了转换 、运行 TensorFlow 模型所需的所有工具。",
    "为了避免重复开发，Google将训练好的模型放在TensorFlow Hub，如图8-4所示。开发人员可以复用这些已经训练好且经过充分认证的模型，节省训练时间和计算资源。这些训练好的模型即可以直接部署，也可以用于迁移学习。",
    "图8-4 TensorFlow Hub",
    "打开TensorFlow Hub网站的主页，在页面左侧可以选取类别，例如Text，Image，Video和Publishers等选项，或在搜索框中输入关键字搜索所需要的模型。",
    "以MobileNet为例，搜索到的模型如图8-5所示，在选择模型是请注意TensorFlow的版本。",
    "可以直接下载模型，或者使用hub.KerasLayer。",
    "m = tf.keras.Sequential([",
    "hub.KerasLayer(\"https://hub.tensorflow.google.cn/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5\", trainable=False),",
    "tf.keras.layers.Dense(num_classes, activation='softmax')",
    "])",
    "m.build([None, 224, 224, 3])  # Batch input shape.",
    "图8-5 MobileNet下载页面",
    "8.3.2 模型转换",
    "TensorFlow Lite转换器将输入的TensorFlow 模型生成 TensorFlow Lite 模型，一种优化的 FlatBuffer 格式，以 .tflite 为文件扩展名，可以通过命令行与Python API使用此转换器。",
    "Google推荐使用Python API进行转换，命令行工具只提供了基本的转化功能。转换后的原模型为 FlatBuffers 格式。 FlatBuffers主要应用于游戏场景，是为了高性能场景创建的序列化库，相比Protocol Buffer有更高的性能和更小的大小等优势，更适合于边缘设备部署。",
    "命令行",
    "TensorFlow Lite 转换器命令行工具 tflite_convert是与TensorFlow一起安装的，在终端运行如下命令：",
    "$ tflite_convert --help",
    "`--output_file`. Type: string. Full path of the output file.",
    "`--saved_model_dir`. Type: string. Full path to the SavedModel directory.",
    "`--keras_model_file`. Type: string. Full path to the Keras H5 model file.",
    "`--enable_v1_converter`. Type: bool. (default False) Enables the converter and flags used in TF 1.x instead of TF 2.x.",
    "参数说明如下：",
    "output_file. 类型: string. 指定输出文件的绝对路径。",
    "saved_model_dir. 类型: string. 指定含有 TensorFlow 1.x 或者 2.0 使用 SavedModel 生成文件的绝对路径目录。",
    "keras_model_file. Type: string. 指定含有 TensorFlow 1.x 或者 2.0 使用 tf.keras model 生成 HDF5 文件的绝对路径目录。",
    "在 TensorFlow模型导出时支持两种模型导出方法和格式SavedModel和Keras Sequential。",
    "转换转换 SavedModel示例如下：",
    "tflite_convert \\",
    "--saved_model_dir=/tmp/mobilenet_saved_model \\",
    "--output_file=/tmp/mobilenet.tflite",
    "转换转换 Keras H5示例如下：",
    "tflite_convert \\",
    "--keras_model_file=/tmp/mobilenet_keras_model.h5 \\",
    "--output_file=/tmp/mobilenet.tflite",
    "Python API",
    "在 TensorFlow 2.0 中，将TensorFlow模型格式转换为TensorFlow Lite 的 Python API 是 tf.lite.TFLiteConverter。在 TFLiteConverter 中有以下的类方法：",
    "TFLiteConverter.from_saved_model()：用来转换 SavedModel 格式模型。",
    "TFLiteConverter.from_keras_model()：用来转换 tf.keras 模型。",
    "TFLiteConverter.from_concrete_functions()：用来转换 concrete functions。",
    "若要详细了解 TensorFlow Lite converter API，请运行 print(help(tf.lite.TFLiteConverter))。TensorFlow 2.x 模型是使用 SavedModel 格式存储的，并通过高阶 tf.keras.* API（Keras 模型）或低阶 tf.* API（用于生成具体函数）生成。",
    "以下示例演示了如何将 SavedModel 转换为 TensorFlow Lite 模型。",
    "import tensorflow as tf",
    "# Convert the model",
    "converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir) # path to the SavedModel directory",
    "tflite_model = converter.convert()",
    "# Save the model.",
    "with open('model.tflite', 'wb') as f:",
    "f.write(tflite_model)",
    "以下示例演示了如何将 Keras 模型转换为 TensorFlow Lite 模型。",
    "import tensorflow as tf",
    "# Create a model using high-level tf.keras.* APIs",
    "model = tf.keras.models.Sequential([",
    "tf.keras.layers.Dense(units=1, input_shape=[1]),",
    "tf.keras.layers.Dense(units=16, activation='relu'),",
    "tf.keras.layers.Dense(units=1)",
    "])",
    "model.compile(optimizer='sgd', loss='mean_squared_error') # compile the model",
    "model.fit(x=[-1, 0, 1], y=[-3, -1, 1], epochs=5) # train the model",
    "# (to generate a SavedModel) tf.saved_model.save(model, \"saved_model_keras_dir\")",
    "# Convert the model.",
    "converter = tf.lite.TFLiteConverter.from_keras_model(model)",
    "tflite_model = converter.convert()",
    "# Save the model.",
    "with open('model.tflite', 'wb') as f:",
    "f.write(tflite_model)",
    "8.3.3 模型推理",
    "TensorFlow Lite 解释器接收一个模型文件，执行模型文件在输入数据上定义的运算符，输出推理结果，通过模型运行数据以获得预测的过程。",
    "解释器适用于多个平台，提供了一个简单的 API，用于从 Java、Swift、Objective-C、C++ 和 Python 运行 TensorFlow Lite 模型。",
    "Java 调用解释器的方式如下：",
    "try (Interpreter interpreter = new Interpreter(tensorflow_lite_model_file)) {",
    "interpreter.run(input, output);",
    "}",
    "如果手机有GPU， GPU 比 CPU 执行更快的浮点矩阵运算，速度提升能有显著效果。例如在有GPU加速的手机上运行MobileNet图像分类，模型运行速度可以提高 5.5 倍。",
    "TensorFlow Lite 解释器可以配置委托（Delegates）以在不同设备上使用硬件加速。GPU 委托（GPU Delegates）允许解释器在设备的 GPU 上运行适当的运算符。",
    "下面的代码显示了从 Java 中使用 GPU 委托的方式:",
    "GpuDelegate delegate = new GpuDelegate();",
    "Interpreter.Options options = (new Interpreter.Options()).addDelegate(delegate);",
    "Interpreter interpreter = new Interpreter(tensorflow_lite_model_file, options);",
    "try {",
    "interpreter.run(input, output);",
    "}",
    "TensorFlow Lite 解释器很容易在Android与iOS平台上使用。Android 开发人员应该使用 TensorFlow Lite AAR。iOS 开发人员应该使用 CocoaPods for Swift or Objective-C。",
    "TensorFlow Lite 解释器同样可以部署在Raspberry Pi 和基于 Arm64 的主板的嵌入式 Linux系统上。",
    "8.3.4 优化模型",
    "TensorFlow Lite 提供了优化模型大小和性能的工具，通常对准确性影响甚微。模型优化的目标是在给定设备上，实现性能、模型大小和准确性的理想平衡。根据任务的不同，你会需要在模型复杂度和大小之间做取舍。如果任务需要高准确率，那么你可能需要一个大而复杂的模型。对于精确度不高的任务，就最好使用小一点的模型，因为小的模型不仅占用更少的磁盘和内存，也一般更快更高效。",
    "量化使用了一些技术，可以降低权重的精确表示，并且可选的降低存储和计算的激活值。量化的好处有:",
    "对现有 CPU 平台的支持。",
    "激活值得的量化降低了用于读取和存储中间激活值的存储器访问成本。",
    "许多 CPU 和硬件加速器实现提供 SIMD 指令功能，这对量化特别有益。",
    "TensorFlow Lite 对量化提供了多种级别的对量化支持。",
    "Tensorflow Lite post-training quantization 量化使权重和激活值的 Post training 更简单。",
    "Quantization-aware training 可以以最小精度下降来训练网络；这仅适用于卷积神经网络的一个子集。",
    "以下的 Python 代码片段展示了如何使用预训练量化进行模型转换：",
    "import tensorflow as tf",
    "converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)",
    "converter.optimizations = [tf.lite.Optimize.OPTIMIZE_FOR_SIZE]",
    "tflite_quant_model = converter.convert()",
    "open(\"converted_model.tflite\", \"wb\").write(tflite_quant_model)",
    "8.4 任务2：实现花卉识别",
    "下面将使用TensorFlow Lite实现花卉识别app，在Android设备上运行图像识别模型MobileNets_v2来识别花卉。本项目实施步骤如下：",
    "通过迁移学习实现花卉识别模型",
    "使用TFLite转换器转换模型。",
    "在Android应用中使用TFLite解释器运行它。",
    "使用 TensorFlow Lite支持库预处理模型输入和后处理模型输出。",
    "最后实现一个在手机上运行的app，可以实时识别照相机所拍摄的花卉，如图8-6所示。",
    "图8-6 花卉识别app",
    "8.4.1 选择模型",
    "选择MobileNet V2进行迁移学习，实现识别花卉模型。MobileNet V2是基于一个流线型的架构，它使用深度可分离的卷积来构建轻量级的深层神经网。可用于图像分类任务，比如猫狗分类、花卉分类等等。提供一系列带有标注的花卉数据集，该算法会载入在ImageNet-1000上的预训练模型，在花卉数据集上做迁移学习。",
    "使用小型数据集时，通常会利用在同一域中的较大数据集上训练的模型所学习的特征。通过实例化预先训练的模型，并在顶部添加全连接的分类器来完成的。预训练的模型被“冻结”并且仅在训练期间更新分类器的权重。在这种情况下，卷积基提取了与每幅图像相关的所有特征，只需训练一个分类器，根据所提取的特征集确定图像类。",
    "通过微调进一步提高性能，调整预训练模型的顶层权重，以便模型学习特定于数据集的高级特征，当训练数据集很大并且非常类似于预训练模型训练的原始数据集时，通常建议使用此技术。",
    "导入相关库",
    "In[1]:",
    "import tensorflow as tf",
    "assert tf.__version__.startswith('2')",
    "import os",
    "import numpy as np",
    "import matplotlib.pyplot as plt",
    "准备数据集",
    "该数据集可以在http://download.tensorflow.org/example_images/flower_photos.tgz下载。每个子文件夹都存储了一种类别的花的图片，子文件夹的名称就是花的类别的名称。平均每一种花有734张图片，图片都是RGB色彩模式的。",
    "In[2]:",
    "_URL = \"http://download.tensorflow.org/example_images/flower_photos.tgz\"",
    "zip_file = tf.keras.utils.get_file(origin=_URL,",
    "fname=\"flower_photos.tgz\",",
    "extract=True)",
    "base_dir = os.path.join(os.path.dirname(zip_file), 'flower_photos')",
    "数据集解压后存放在.keras\\datasets\\flower_photos目录下。",
    "2016/02/11  04:52    <DIR>          daisy",
    "2016/02/11  04:52    <DIR>          dandelion",
    "2016/02/09  10:59           418,049 LICENSE.txt",
    "2016/02/11  04:52    <DIR>          roses",
    "2016/02/11  04:52    <DIR>          sunflowers",
    "2016/02/11  04:52    <DIR>          tulips",
    "将数据集划分为训练集和验证集。训练前需要手动加载图像数据，完成包括遍历数据集的目录结构、加载图像数据以及返回输入和输出。可以使用 Keras 提供的 ImageDataGenerator 类，它是keras.preprocessing.image模块中的图片生成器，负责生成一个批次一个批次的图片，以生成器的形式给模型训练",
    "ImageDataGenerator的构造函数包含许多参数，用于指定加载后如何操作图像数据，包括像素缩放和数据增强。",
    "接着需要一个迭代器来逐步加载单个数据集的图像。这需要调用flow_from_directory（）函数并指定该数据集目录，如 train、validation 目录，函数还允许配置与加载图像相关的更多细节。 target_size参数允许将所有图像加载到一个模型需要的特定的大小，设置为大小为(224, 224)的正方形图像。",
    "batch_size默认的为32，意思是训练时从数据集中的不同类中随机选出的32个图像，该值设置为64。 在评估模型时，可能还希望以确定性顺序返回批处理，这可以通过将 shuffle参数设置为False。",
    "In[3]:",
    "IMAGE_SIZE = 224",
    "BATCH_SIZE = 64",
    "datagen = tf.keras.preprocessing.image.ImageDataGenerator(",
    "rescale=1./255,",
    "validation_split=0.2)",
    "train_generator = datagen.flow_from_directory(",
    "base_dir,",
    "target_size=(IMAGE_SIZE, IMAGE_SIZE),",
    "batch_size=BATCH_SIZE,",
    "subset='training')",
    "val_generator = datagen.flow_from_directory(",
    "base_dir,",
    "target_size=(IMAGE_SIZE, IMAGE_SIZE),",
    "batch_size=BATCH_SIZE,",
    "subset='validation')",
    "Out[3]:",
    "Found 2939 images belonging to 5 classes.",
    "Found 731 images belonging to 5 classes.",
    "In[4]:",
    "for image_batch, label_batch in train_generator:",
    "break",
    "image_batch.shape, label_batch.shape",
    "Out[4]:",
    "((64, 224, 224, 3), (64, 5))",
    "保存标签文件：",
    "In[5]:",
    "print (train_generator.class_indices)",
    "labels = '\\n'.join(sorted(train_generator.class_indices.keys()))",
    "with open('labels.txt', 'w') as f:",
    "f.write(labels)",
    "迁移学习改造模型",
    "实例化一个预加载了ImageNet训练权重的MobileNet V2模型。",
    "In[6]:",
    "IMG_SHAPE = (IMAGE_SIZE, IMAGE_SIZE, 3)",
    "# Create the base model from the pre-trained model MobileNet V2",
    "base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,",
    "include_top=False,",
    "weights='imagenet')",
    "Out[6]:",
    "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5",
    "9412608/9406464 [==============================] - 2s 0us/step",
    "MobileNet V2模型默认是将图片分类到1000类，每一类都有各自的标注。因为本问题分类只有5类，所以构建模型的时候增加include_top=False参数，表示不需要原有模型中最后的神经网络层（分类到1000类），以便增加自己的输出层。",
    "由于是通过迁移学习改造模型，所以不改变基础模型的各项参数变量，因为这样才能保留原来大规模训练的优势。使用model.trainable = False，设置在训练中，基础模型的各项参数变量不会被新的训练修改数据。",
    "您需要选择用于特征提取的MobileNet V2层，显然，最后一个分类层（在“顶部”，因为大多数机器学习模型的图表从下到上）并不是非常有用。相反，您将遵循通常的做法，在展平操作之前依赖于最后一层，该层称为“瓶颈层”，与最终/顶层相比，瓶颈层保持了很多通用性。随后在原有模型的后面增加一个池化层，对数据降维。最后是一个5个节点的输出层，因为需要的结果只有5类。",
    "要从特征块生成预测，请用5x5在空间位置上进行平均，使用tf.keras.layers.GlobalAveragePooling2D层将特征转换为每个图像对应一个1280元素向量。",
    "In[7]:",
    "base_model.trainable = False",
    "model = tf.keras.Sequential([",
    "base_model,",
    "tf.keras.layers.Conv2D(32, 3, activation='relu'),",
    "tf.keras.layers.Dropout(0.2),",
    "tf.keras.layers.GlobalAveragePooling2D(),",
    "tf.keras.layers.Dense(5, activation='softmax')",
    "])",
    "编译，训练模型",
    "在训练之前先编译模型，损失函数使用类别交叉熵。",
    "In[8]:",
    "model.compile(optimizer=tf.keras.optimizers.Adam(),",
    "loss='categorical_crossentropy',",
    "metrics=['accuracy'])",
    "Out[8]:",
    "Model: \"sequential\"",
    "_________________________________________________________________",
    "Layer (type)                 Output Shape              Param #",
    "=================================================================",
    "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984",
    "_________________________________________________________________",
    "conv2d (Conv2D)              (None, 5, 5, 32)          368672",
    "_________________________________________________________________",
    "dropout (Dropout)            (None, 5, 5, 32)          0",
    "_________________________________________________________________",
    "global_average_pooling2d (Gl (None, 32)                0",
    "_________________________________________________________________",
    "dense (Dense)                (None, 5)                 165",
    "=================================================================",
    "Total params: 2,626,821",
    "Trainable params: 368,837",
    "Non-trainable params: 2,257,984",
    "训练模型，训练和验证准确性/损失的学习曲线如图8-7所示。",
    "In[9]:",
    "epochs = 10",
    "history = model.fit(train_generator, steps_per_epoch=len(train_generator),",
    "epochs=epochs, validation_data=val_generator,",
    "validation_steps=len(val_generator))",
    "图8-7 学习曲线",
    "微调",
    "设置model.trainable = False参数后，训练期间将不更新预训练网络的权重，只在MobileNet V2基础模型上训练了几层。如果希望进一步提高性能的方法是训练预训练模型的顶层的权重以及刚添加的分类器的训练。",
    "只有在训练顶层分类器并将预先训练的模型设置为不可训练之后，才应尝试此操作。如果在预先训练的模型上添加一个随机初始化的分类器并尝试联合训练所有层，则梯度更新的幅度将太大，并且预训练模型将忘记它学到的东西。",
    "应该尝试微调少量顶层而不是整个MobileNet模型，前几层学习非常简单和通用的功能，这些功能可以推广到几乎所有类型的图像，随着层越来越高，这些功能越来越多地针对训练模型的数据集。微调的目的是使这些专用功能适应新数据集，而不是覆盖通用学习。",
    "首先取消冻结模型的顶层，代码如下：",
    "In[10]:",
    "base_model.trainable = True",
    "# Let's take a look to see how many layers are in the base model",
    "print(\"Number of layers in the base model: \", len(base_model.layers))",
    "# Fine tune from this layer onwards",
    "fine_tune_at = 100",
    "# Freeze all the layers before the `fine_tune_at` layer",
    "for layer in base_model.layers[:fine_tune_at]:",
    "layer.trainable =  False",
    "Out[10]:",
    "Number of layers in the base model:  155",
    "取消冻结base_model，MobileNet V2模型网络一共155层，前100层仍设置为无法训练，然后重新编译模型，并恢复训练。使用低学习率编译模型，代码如下：",
    "In[11]:",
    "model.compile(loss='categorical_crossentropy',",
    "optimizer = tf.keras.optimizers.Adam(1e-5),",
    "metrics=['accuracy'])",
    "model.summary()",
    "如果你训练得更早收敛，这将使你的准确率提高几个百分点。",
    "history_fine = model.fit(train_generator,",
    "steps_per_epoch=len(train_generator),",
    "epochs=5,",
    "validation_data=val_generator,",
    "validation_steps=len(val_generator))",
    "经过微调后，模型精度几乎达到98%，当微调MobileNet V2基础模型的最后几层并在其上训练分类器时，验证损失远远高于训练损失，模型可能有一些过度拟合。",
    "转换为TFLite格式",
    "使用tf.saved_model.save保存模型，然后将将模型保存为tf lite兼容格式。",
    "SavedModel 包含一个完整的 TensorFlow 程序——不仅包含权重值，还包含计算。它不需要原始模型构建代码就可以运行。",
    "saved_model_dir = 'save/fine_tuning'",
    "tf.saved_model.save(model, saved_model_dir)",
    "converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)",
    "tflite_model = converter.convert()",
    "with open('save/fine_tuning/assets/model.tflite', 'wb') as f:",
    "f.write(tflite_model)",
    "模型文件保存在save\\fine_tuning\\assets目录下。",
    "8.4.2 Android部署",
    "我们已经使用MobileNet V2 创建、训练和导出了自定义TensorFlow Lite模型，已经导出以下经过训练的TF Lite模型文件和标签文件。接下来将在手机端部署，运行一个使用该模型识别花卉图片的Android 应用。",
    "准备工作",
    "Tensor Flow官网提供了很多有趣的TensorFlow Lite示例，可从github下载源码：",
    "git clone https://github.com/tensorflow/examples.git",
    "项目代码位于目录examples/lite/codelabs/flower_classification/android/，start目录下为项目模板，finish目录下是项目完整代码。",
    "安装Android Studio，确认Android Studio版本 3.0+以上，如图8-8。",
    "图8-8 Android Studio版本信息",
    "打开 Android Studio Android Studio“启动”图标。 该工具加载后，从以下弹出式窗口中选择 Android Studio“打开项目”图标“打开现有 Android Studio 项目”(Open an existing  project)：",
    "图8-9 使用 Android Studio 打开项目",
    "工作目录中选择 examples/lite/codelabs/flower_classification/android/finish。",
    "将TensorFlow Lite 模型文件model.tflite，标签文件label.txt 拷贝到项目文件夹下/android/start/app/src/main/assets/。",
    "配置build.gradle",
    "首次打开项目时，会看到一个“Gradle同步”(Gradle Sync) 弹出式窗口，询问是否要使用 Gradle 封装容器。在Gradle同步前先将模型文件拷贝到assets目录下。",
    "要使用tensorflow lite需要导入对应的库，这里通过修改build.gradle来实现。",
    "在dependencies下增加'org.tensorflow:tensorflow-lite:+'，代码如下：",
    "implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }",
    "implementation('org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly') { changing = true }",
    "implementation('org.tensorflow:tensorflow-lite-support:0.0.0-nightly') { changing = true }",
    "在android下增加 aaptOptions，以防止Android在生成应用程序二进制文件时压缩TensorFlow Lite模型文件。代码如下：",
    "aaptOptions {",
    "noCompress \"tflite\"",
    "}",
    "运行Sync Gradle开始Android环境部署， 运行结果如图8-10：",
    "图8-10  Gradle同步结果",
    "因为获取SDK和gradle编译环境等资源，需要先给Android Studio配置proxy或者使用国内的镜像。可将 build.gradle 中的maven源 google() 和 jcenter() 分别替换为国内镜像，如下：",
    "buildscript {",
    "repositories {",
    "maven { url ' https://maven.aliyun.com/repository/google '}",
    "maven { url ' https://maven.aliyun.com/repository/jcenter '}",
    "}",
    "dependencies {",
    "classpath 'com.android.tools.build:gradle:3.5.1'",
    "}",
    "}",
    "allprojects {",
    "repositories {",
    "maven { url ' https://maven.aliyun.com/repository/google '}",
    "maven { url ' https://maven.aliyun.com/repository/jcenter '}",
    "}",
    "}",
    "初始化TensorFlow Lite解释器",
    "推理过程是通过解释器（interpreter）来执行，首先是读取模型，将.tflite模型加载到内存中，其中包含了模型的执行流图。",
    "修改ClassifierFloatMobileNet.java文件的ClassifierFloatMobileNet类，添加model.tflite 和 label.txt，代码如下：",
    "public class ClassifierFloatMobileNet extends Classifier {",
    "...",
    "// TODO: Specify model.tflite as the model file and labels.txt as the label file",
    "@Override",
    "protected String getModelPath() {",
    "return \"model.tflite\";",
    "}",
    "@Override",
    "protected String getLabelPath() {",
    "return \"labels.txt\";",
    "}",
    "...",
    "}",
    "在Classifier.java文件中的Classifier类里声明TFLite 解释器tflite，如果有GPU，还需要声明GPU代理gpuDelegate。",
    "protected Classifier(Activity activity, Device device, int numThreads) throws IOException {",
    "...",
    "// TODO: Declare a GPU delegate",
    "private GpuDelegate gpuDelegate = null;",
    "/** An instance of the driver class to run model inference with Tensorflow Lite. */",
    "// TODO: Declare a TFLite interpreter",
    "protected Interpreter tflite;",
    "...",
    "}",
    "在Classifier类构造函数中创建tflite实例。",
    "protected Classifier(Activity activity, Device device, int numThreads) throws IOException {",
    "...",
    "switch (device) {",
    "case GPU:",
    "// TODO: Create a GPU delegate instance and add it to the interpreter options",
    "gpuDelegate = new GpuDelegate();",
    "tfliteOptions.addDelegate(gpuDelegate);",
    "break;",
    "case CPU:",
    "break;",
    "}",
    "tfliteOptions.setNumThreads(numThreads);",
    "// TODO: Create a TFLite interpreter instance",
    "tflite = new Interpreter(tfliteModel, tfliteOptions);",
    "...",
    "}",
    "执行推理",
    "TensorFlow Lite解释器初始化后，开始编写代码以识别输入图像。 TensorFlow Lite无需使用ByteBuffer来处理图像， 它提供了一个方便的支持库来简化图像预处理，同样还可以处理模型的输出，并使TensorFlow Lite解释器更易于使用。下面需要做的工作有：",
    "数据转换（Transforming Data）：将输入数据转换成模型接收的形式或排布，如resize原始图像到模型输入大小；",
    "执行推理（Running Inference）：这一步使用API来执行模型。其中包括了创建解释器、分配张量等；",
    "解释输出（Interpreting Output）：用户取出模型推理的结果，并解读输出，如分类结果的概率。",
    "首先处理摄像头的输入图像，修改Classifier.java文件中的loadImage方法，代码如下：",
    "private TensorImage loadImage(final Bitmap bitmap, int sensorOrientation) {",
    "...",
    "// TODO: Define an ImageProcessor from TFLite Support Library to do preprocessing",
    "ImageProcessor imageProcessor =",
    "new ImageProcessor.Builder()",
    ".add(new ResizeWithCropOrPadOp(cropSize, cropSize))",
    ".add(new ResizeOp(imageSizeX, imageSizeY, ResizeMethod.NEAREST_NEIGHBOR))",
    ".add(new Rot90Op(numRoration))",
    ".add(getPreprocessNormalizeOp())",
    ".build();",
    "return imageProcessor.process(inputImageBuffer);",
    "...",
    "}",
    "修改recognizeImage方法执行推理，将预处理后的图像提供给TensorFlow Lite解释器。代码如下:",
    "public List<Recognition> recognizeImage(final Bitmap bitmap, int sensorOrientation) {",
    "...",
    "// TODO: Run TFLite inference",
    "tflite.run(inputImageBuffer.getBuffer(), outputProbabilityBuffer.getBuffer().rewind());",
    "...",
    "}",
    "最后从模型输出中获取类别及其概率。",
    "public List<Recognition> recognizeImage(final Bitmap bitmap, int sensorOrientation) {",
    "...",
    "// TODO: Use TensorLabel from TFLite Support Library to associate the probabilities with category labels\n    Map<String, Float> labeledProbability =",
    "new TensorLabel(labels, probabilityProcessor.process(outputProbabilityBuffer))",
    ".getMapWithFloatValue();",
    "...",
    "}",
    "labeledProbability是将每个类别映射到其概率的对象。 TensorFlow Lite支持库提供了一个方便的实用程序，可将模型输出转换为概率图，使用getTopKProbability（..）方法从labeledProbability中提取前几名最可能的标签。",
    "试运行应用",
    "应用可以在Android 设备上运行，也可以在 Android Studio 模拟器中运行。如果计算机没有摄像头就必须选择Android 设备运行该应用。",
    "图8-11  设置模拟器",
    "Android Studio 可轻松设置模拟器，选择“Tools”， “AVD Manager”。",
    "如需设置模拟器的相机，需要在“Android 虚拟设备管理器”(Android Virtual Device Manager)中创建一个新设备。从 ADVM 主页面中选择“创建虚拟设备”(Create Virtual Device)：",
    "图8-12 创建虚拟设备",
    "然后在“验证配置”(Verify Configuration) 页面（虚拟设备设置的最后一页）上，选择“显示高级设置”(Show Advanced Settings)：",
    "图8-13 高级设置",
    "如图在Android 设备上运行，设置手机启用“开发者模式”和“USB 调试”，否则无法将该应用从 Android Studio 加载到您的手机上。",
    "如需启动构建和安装过程，运行Gradle同步。",
    "图8-14 运行 Gradle 同步",
    "运行 Gradle 同步后，请选择单击Android Studio“开始”图标，需要从如图8-15窗口中选择设备，运行结果如图8-16所示。",
    "图8-15 选择设备                       图8-16 运行结果",
    "拓展项目",
    "TensorFlow 官网提供了很多TensorFlow Lite 示例应用，探索经过预先训练的 TensorFlow Lite 模型，了解如何在示例应用中针对各种机器学习应用场景使用这些模型。并且分别提供了Android设备、iOS设备以及Raspberry Pi上的应用实现代码，如图8-17所示。",
    "本项目任务要求是基于TensorFlow Lite开发一个安卓示例应用程序，应用程序利用设备的摄像头来实时地检测和显示一个人的关键部位。",
    "通过PoseNet模型实现人体姿势估计，PoseNet可以通过检测关键身体部位的位置来估计图像或者视频中的人体姿势。例如，该模型可以估计图像中人的手肘和/或膝盖位置。",
    "可参考示例代码：",
    "https://github.com/tensorflow/examples/tree/master/lite/examples/posenet/android。",
    "图8-17 图像分类示例应用",
    "该PoseNet示例应用程序功能是捕捉摄像头拍摄的帧，并实时覆盖图像上的关键点。应用程序对每张传入的摄像头图像执行以下操作：",
    "从摄像头预览中获取图像数据并转换成格式。",
    "创建一个位图对象来保存来自 RGB 格式帧数据的像素。将位图裁剪并缩放到模型输入的大小，以便将其传递给模型。",
    "从 PoseNet 库中调用estimateSinglePose()函数来获取Person对象。",
    "将位图缩放回屏幕大小，在Canvas对象上绘制新的位图。",
    "使用从Person对象中获取的关键点位置在画布上绘制骨架。显示置信度超过特定阈值（默认值为 0.2）的关键点。",
    "使用TenzeFullLight的工作流,包括如下步骤,包括选择模型,转换模型,部署到我们的设备,优化模型。",
    "第一,选择模型,可以使用自己的TenzeFullLight模型,再线查找模型,或者从TenzeFullLight预讯练模型中选择一个模型,直接使用或重新训练。",
    "二,转换模型,如果使用的是制定一模型,可以使用TenzeFullLight转换器,将模型转换为TenzeFullLight格式。",
    "三,部署到设备,使用TenzeFullLight解释器,在设备端运行模型。",
    "四,优化模型,使用模型优化工具包,缩减模型的大小,并提高起效率,同时最大线度的降低对准确力的影响。",
    "TenzeFullLight,允许在移动端,签入式和无连网设备上运行TenzeFullLight模型。",
    "有多种方式可以获得TenzeFullLight模型。",
    "为了避免重复开发,Google将训练好的模型放在TenzeFullLight Hub。",
    "开发人员可以复用这些已经训练好且经过充分认证的模型。",
    "结成训练时间和计算资源。",
    "这些训练好的模型,即可以直接部署,也可以用于签议学习。",
    "打开TenzeFullLight Hub的网站的主页,在页面左侧可以选取类别,例如Paxx,Image, Widow和Publicsir等选项。",
    "或在搜索框中输入关键字搜索所需要的模型。",
    "以Mobile Night为例,搜索到的模型如土所市。",
    "在选择模型时,请注意TenzeFullLight的版本。",
    "可以直接下载模型,或者使用HobbyCarrie Slayer。",
    "为了在TenzeFullLight中使用模型,模型必须转换成一种特殊格式。",
    "TenzeFullLight提供了转换运行TenzeFullLight模型所需的所有工具。",
    "TenzeFullLight需要将模型转换为一种优化的FlightBuffer格式,以点TFLight为文件扩展名。",
    "可以通过命令行与PaxxApi使用磁转换器。",
    "Google推荐使用PaxxApi进行转换。",
    "命令行工具只提供了基本的转换功能。",
    "转换后的原模型为FlightBuffer格式,FlightBuffer主要应用于游戏场景,是为了高性能场景创建的序列化库。",
    "相比Portoco Buffer有更高的性能和更小的大小等优势,更适合与边缘设备部署。",
    "有了模型后,我们就可以在设备端使用TenzeFullLight模型,根据输入数据进行预测。",
    "需要使用TenzeFullLight模型进行推理,就必须通过解释器运行该模型。",
    "TenzeFullLight解释器使用近太计算图排序和自定议内存分配器。",
    "来确保最小的复杂、处使化和执行掩饰。",
    "TenzeFullLight推理通常遵循以下步骤,以加载模型。",
    "我们必须将点TFlight模型加载到内存中,其中包含模型的执行计算图。",
    "2.转换数据。模型的原始输入数据,通常与模型期望的输入数据格式不匹配。",
    "例如,我们可能需要调整图像大小或更改图像格式才能与模型肩融。",
    "3.运行推理。",
    "此步骤设夕使用TenzeFullLight api来执行模型。",
    "如以下各部分所数,它设极构建解释器和分配张量等热干部种。",
    "4.解释输出。",
    "当我们从模型推理,进收到结果后,必须对我们的应用有意义的方式来解释张量。",
    "例如模型可能只会返回概率列表,由我们自己来将概率应设到相关的设计。",
    "而在我们的内边,并呈现给最终用户。",
    "TenzeFullLight支持大多数常见的移动或签入视频台,例如安卓、IOS和Linux。",
    "TenzeFullLight,装位在小型设备上进行快速推理而设计。",
    "因此,API试图以新生变力性,为代价来避免不必要的复制,也就不足为其了。",
    "在安卓上,可以使用Java或CjjAPI来执行TenzeFullLight推理。",
    "JavaAPI提供了变力性,并且可以直接带安卓Ectivity内中使用。",
    "CjjAPI提供了更好的灵活性和速度,但可能需要编写,G&I封装容器才能在Java和Cjj曾之间移动数据。",
    "对于使用元数据增强的TenzeFullLight模型,开发者可以使用TenzeFullLight安卓封装容器代码生成器,",
    "来创建平台特定的封装容器代码。",
    "封装容器代码无需在安卓上直接与Bike Buffer进行交互。",
    "在IOS上,TenzeFullLight使用于Ectivity和Objective C编写的原生LSQ。",
    "我们也可以直接在Objective C代码中使用CAPI。",
    "在Linux平台,我们可以使用于Cjj和Bike Buffer提供的TenzeFullLight API运行推理。",
    "TenzeFullLight和TenzeFullModel Optimization to Kate。",
    "提供了最小优化推理复杂性的工具,可将优化推断的复杂性将至最低。",
    "TenzeFullLight对量化提供了多种极别的量化支持。",
    "模型优化的目标是在给定设备上,实现性能模型大小和整确性的理想平衡。",
    "根据任务的不同,我们会需要在模型复杂度和大小之间做取捨。",
    "如果任务需要高准确率,那么我们可能需要一个大而复杂的模型。",
    "对于精确度不高的任务,就最好使用小一点的模型。",
    "因为小的模型不仅占用更小的磁盘和内层,也一般更快更高效。",
    "教小的存储大小,小模型在用户设备上占用的存储空间更少。",
    "例如,一个使用小模型的安卓应用,在用户的移动设备上会占用更小的存储空间。",
    "教小的下载大小,小模型下载到用户设备所需的时间和带宽教小。",
    "更小的内层用量,小模型在运行时使用的内层更小,",
    "从而释放内层供应用的其他部分使用,并可以转化为更好的性能和稳定性。",
    "Thuntherflow Lite,目前支持通过量化,简直和具类进行优化。",
    "量化的工作原理是降低用于表示模型参数的数字,温任情况为32位幅点数的精度。",
    "这样可以获得教小的模型大小和教快的计算速度。",
    "Thuntherflow Lite提供讯念后flow.16量化,讯念后动态范围量化,讯念后量化,量化感知讯念。",
    "简直的工作原理是移除模型中对其预测影响很小的参数。",
    "简直后的模型在磁盘上的大小相同,并且只有相同的运行时延迟。",
    "但可以更高效地压缩,这时简直成为缩简模型下载大小的使用技术。",
    "具类的工作原理是,将模型中每一层的权重,归入预定数量的具类中,然后共享属于每个单独具类的权重的智新值。",
    "这就减少了模型中唯一权重值的数量,从而降低了起伏砸性。"
  ],
  "sources": [
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第1段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第2段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第3段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第4段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第6段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第7段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第8段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第9段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第10段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第11段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第12段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第13段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第14段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第15段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第16段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第17段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第19段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第20段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第21段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第22段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第23段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第24段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第25段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第27段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第28段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第29段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第30段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第31段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第32段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第33段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第34段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第35段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第36段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第37段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第38段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第39段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第40段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第41段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第42段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第43段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第44段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第45段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第46段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第47段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第48段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第49段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第50段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第51段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第52段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第54段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第55段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第56段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第57段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第58段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第60段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第61段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第62段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第63段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第64段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第66段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第67段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第68段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第70段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第71段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第72段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第73段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第75段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第76段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第77段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第78段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第80段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第81段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第82段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第83段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第84段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第86段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第87段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第88段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第89段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第90段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第91段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第92段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第93段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第94段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第95段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第96段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第98段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第99段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第100段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第101段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第102段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第103段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第104段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第105段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第106段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第107段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第108段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第110段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第111段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第112段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第113段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第114段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第116段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第117段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第118段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第119段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第120段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第121段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第122段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第123段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第124段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第125段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第126段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第127段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第128段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第129段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第130段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第132段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第133段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第135段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第136段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第137段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第138段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第139段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第140段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第141段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第142段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第143段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第144段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第145段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第146段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第148段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第149段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第150段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第151段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第152段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第153段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第154段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第155段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第156段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第157段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第158段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第159段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第160段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第161段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第163段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第164段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第165段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第166段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第167段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第168段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第169段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第170段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第171段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第172段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第173段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第174段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第175段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第176段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第177段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第178段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第179段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第180段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第181段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第182段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第183段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第184段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第185段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第186段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第187段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第188段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第189段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第190段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第191段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第192段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第193段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第194段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第195段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第196段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第197段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第198段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第199段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第200段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第201段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第202段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第203段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第204段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第205段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第206段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第207段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第208段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第209段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第210段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第211段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第212段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第213段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第214段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第215段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第216段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第217段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第218段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第219段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第220段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第221段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第222段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第223段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第224段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第225段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第227段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第228段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第229段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第230段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第231段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第232段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第233段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第234段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第235段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第236段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第237段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第238段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第239段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第240段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第241段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第242段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第243段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第244段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第245段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第246段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第247段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第248段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第249段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第250段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第252段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第253段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第254段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第255段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第256段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第257段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第258段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第259段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第260段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第261段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第262段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第263段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第264段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第265段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第266段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第267段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第268段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第269段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第270段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第271段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第273段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第274段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第275段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第276段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第277段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第279段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第280段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第281段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第282段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第283段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第284段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第285段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第286段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第288段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第289段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第291段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第292段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第293段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第294段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第295段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第296段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第297段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第299段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第300段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第301段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第302段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第303段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第304段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第305段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第306段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第307段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第309段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第310段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第312段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第313段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第314段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第315段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第316段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第317段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第318段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第319段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第320段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第321段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第322段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第323段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第324段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第325段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第327段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第328段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第330段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第331段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第332段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第333段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第334段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第335段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第336段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第337段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第338段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第339段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第340段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第341段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第342段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第343段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第344段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第345段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第346段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第348段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第349段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第350段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第351段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第352段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第353段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第354段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第356段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第357段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第358段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第360段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第361段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第362段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第364段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第365段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第367段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第368段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第369段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第370段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第371段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第373段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第374段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第376段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第377段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第378段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第379段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第380段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第381段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第382段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第383段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第384段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第385段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第386段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第387段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第389段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第390段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第391段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第392段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第393段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第394段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第395段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第396段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第397段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第399段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第400段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第402段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第403段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第404段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第405段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第406段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第407段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第408段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第409段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第410段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第411段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第412段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第413段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第414段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第415段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第416段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第417段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第418段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第419段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第420段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第422段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第423段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第424段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第425段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第427段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第428段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第429段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第430段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第432段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第433段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第435段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第436段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第437段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第439段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第440段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第441段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第443段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第444段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第445段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第447段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第448段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第449段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第451段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第452段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第453段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第455段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第456段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第457段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第458段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第459段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第460段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第461段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第462段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第463段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第464段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第465段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第466段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第467段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第469段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第470段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第471段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第472段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第473段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第475段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第476段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第477段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第478段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第479段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第480段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第481段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第482段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第483段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第484段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第485段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第486段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第487段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第488段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第489段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第490段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第491段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第492段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第493段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第494段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第495段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第496段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第497段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第498段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第499段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第500段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第502段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第503段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第504段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第505段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第507段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第508段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第510段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第511段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第513段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第514段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第515段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第516段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第517段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第518段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第519段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第520段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第521段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第522段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第523段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第525段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第527段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第529段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第530段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第531段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第532段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第534段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第535段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第536段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第538段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第539段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第540段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第541段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第542段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第543段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第544段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第545段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第547段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第548段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第549段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第550段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第551段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第552段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第554段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第555段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第556段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第558段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第559段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第560段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第561段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第562段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第564段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第565段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第566段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第568段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第569段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第570段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第571段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第572段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第573段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第575段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第576段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第577段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第579段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第580段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第581段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第582段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第583段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第584段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第585段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第586段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第587段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第588段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第589段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第591段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第592段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第593段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第595段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第596段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第597段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第598段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第599段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第600段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第601段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第602段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第603段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第604段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第606段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第607段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第608段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第609段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第611段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第612段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第613段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第614段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第615段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第616段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第617段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第618段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第620段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第621段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第622段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第623段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第624段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第625段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第626段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第627段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第629段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第630段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第632段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第633段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第634段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第635段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第636段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第637段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第638段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第639段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第640段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第641段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第642段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第643段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第644段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第645段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第646段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第647段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第648段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第649段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第650段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第651段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第652段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第653段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第654段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第655段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第656段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第657段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第658段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第659段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第660段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第661段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第662段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第663段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第664段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第665段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第666段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第667段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第668段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第669段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第670段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第672段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第673段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第674段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第675段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第676段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第677段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第678段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第679段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第680段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第682段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第683段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第684段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第686段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第687段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第688段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第689段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第690段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第691段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第692段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第694段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第695段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第696段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第697段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第698段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第699段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第700段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第702段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第703段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第704段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第705段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第706段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第707段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第708段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第709段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第711段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第712段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第713段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第714段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第715段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第716段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第717段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第718段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第719段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第720段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第721段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第723段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第724段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第725段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第726段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第727段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第728段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第730段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第731段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第732段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第733段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第734段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第735段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第736段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第738段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第739段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第740段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第743段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第744段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第745段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第746段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第747段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第749段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第750段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第752段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第753段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第754段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第755段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第756段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第758段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第759段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第761段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第762段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第763段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第764段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第765段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第766段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第768段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第769段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第772段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第773段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第774段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第775段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第776段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第777段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第778段",
    "upload-18004663699717278488-cp07-样章示例-TensorFlow.js应用开发_130626.docx 第779段",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 0.0-10.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 10.0-17.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 17.0-25.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 25.0-29.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 30.0-34.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 35.0-38.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 39.0-47.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 49.0-52.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 52.0-56.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 57.0-63.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 63.0-70.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 71.0-76.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 76.0-83.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 84.0-88.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 89.0-94.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 95.0-99.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 99.0-103.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 105.0-111.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 112.0-116.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 116.0-121.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 122.0-126.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 126.0-132.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 132.0-137.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 138.0-142.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 144.0-149.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 149.0-155.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 155.0-159.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 160.0-164.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 164.0-168.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 168.0-174.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 174.0-180.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 180.0-184.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 184.0-188.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 188.0-190.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 190.0-194.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 194.0-198.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 198.0-205.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 205.0-211.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 211.0-217.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 217.0-222.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 222.0-226.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 226.0-228.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 242.0-245.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 246.0-251.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 251.0-253.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 253.0-257.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 257.0-260.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 260.0-263.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 263.0-267.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 268.0-270.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 270.0-275.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 276.0-279.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 279.0-283.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 284.0-288.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 288.0-291.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 390.0-393.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 393.0-395.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 395.0-397.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 397.0-400.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 400.0-403.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 403.0-404.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 404.0-406.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 406.0-409.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 409.0-410.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 410.0-411.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 411.0-412.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 412.0-413.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 413.0-415.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 415.0-417.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 417.0-418.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 418.0-421.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 421.0-423.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 423.0-424.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 424.0-427.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 430.0-434.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 434.0-436.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 436.0-440.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 440.0-442.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 442.0-446.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 449.0-453.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 453.0-455.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 539.0-540.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 540.0-541.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 541.0-542.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 542.0-543.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 543.0-544.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 544.0-545.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 545.0-546.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 546.0-547.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 547.0-548.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 548.0-549.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 549.0-550.0s",
    "upload-1071592580165357713-02 TensorFlow.js框架_133408.mp4 550.0-551.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 0.0-13.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 13.8-20.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 20.4-26.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 26.8-30.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 30.4-36.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 36.0-42.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 42.0-48.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 48.0-53.3s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 53.3-62.9s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 62.9-67.7s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 67.7-78.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 78.8-84.9s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 84.9-91.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 91.8-96.6s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 96.6-100.3s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 100.3-105.3s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 105.3-108.7s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 108.7-112.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 112.4-117.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 117.8-123.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 123.4-130.3s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 130.3-134.7s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 134.7-137.2s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 137.2-140.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 140.0-144.6s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 144.6-147.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 147.4-154.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 154.0-157.2s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 157.2-160.3s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 160.3-164.6s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 166.4-170.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 171.5-174.7s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 174.7-179.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 181.2-184.2s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 184.6-188.6s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 189.4-194.7s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 195.1-199.0s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 199.0-201.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 203.0-206.2s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 206.2-209.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 211.5-216.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 217.2-221.8s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 221.8-224.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 225.6-228.6s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 228.6-230.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 231.1-233.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 234.4-240.4s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 240.4-243.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 244.5-250.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 251.5-259.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 260.5-263.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 264.5-267.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 267.5-271.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 272.5-276.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 276.5-278.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 279.5-284.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 285.5-288.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 288.5-291.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 291.5-295.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 296.5-300.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 300.5-303.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 307.5-313.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 313.5-319.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 319.5-323.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 323.5-327.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 328.5-330.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 330.5-334.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 335.5-339.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 340.5-346.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 346.5-349.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 349.5-354.5s",
    "upload-8234611574044642522-01 认识TensorFlow.js-1_134000.mp4 354.5-357.5s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 0.0-12.1s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 12.1-14.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 14.9-19.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 19.4-25.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 25.4-29.0s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 29.0-34.0s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 34.0-38.5s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 38.5-42.5s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 42.5-45.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 45.8-49.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 49.4-54.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 54.7-59.3s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 59.3-63.5s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 63.5-68.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 68.6-74.2s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 74.2-81.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 81.8-89.0s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 89.0-95.1s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 95.1-103.0s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 103.0-106.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 106.9-110.3s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 110.4-115.0s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 115.0-120.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 120.4-123.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 123.6-129.3s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 133.0-139.3s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 139.3-148.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 148.7-156.2s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 156.2-161.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 161.7-167.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 167.8-173.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 173.4-177.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 177.4-183.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 183.9-189.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 197.8-205.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 205.9-213.1s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 213.1-220.4s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 220.4-228.5s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 228.5-236.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 236.9-244.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 244.6-252.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 252.6-260.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 260.6-268.6s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 268.7-276.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 276.7-284.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 284.7-292.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 292.8-300.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 300.8-308.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 308.8-316.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 316.9-324.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 324.9-332.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 332.9-340.9s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 340.9-346.7s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 376.7-384.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 384.8-392.8s",
    "upload-3032898790497404397-03 TensorFlow.js框架(模型与内存管理）_134327.mp4 395.8-405.3s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 0.0-9.5s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 9.5-13.8s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 13.8-17.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 17.4-21.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 21.4-27.0s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 27.5-36.6s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 36.6-40.6s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 40.6-48.0s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 48.0-53.5s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 53.5-57.0s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 57.0-62.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 62.4-66.1s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 66.1-78.7s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 78.7-82.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 82.4-85.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 85.4-88.1s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 88.1-93.6s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 93.6-95.9s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 95.9-99.8s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 99.8-103.4s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 103.4-106.6s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 106.6-110.1s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 110.1-116.8s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 116.8-119.5s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 119.5-124.0s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 124.0-130.1s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 130.1-134.5s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 134.5-137.0s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 141.1-147.3s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 147.3-155.7s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 155.7-160.7s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 160.7-168.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 169.2-178.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 180.2-187.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 187.2-190.6s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 190.6-196.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 197.2-205.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 210.2-214.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 214.2-220.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 220.2-225.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 225.2-227.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 228.2-232.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 233.2-237.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 239.2-241.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 241.2-245.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 245.2-249.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 249.2-254.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 256.2-259.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 259.2-263.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 263.2-269.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 274.2-278.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 278.2-283.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 284.2-286.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 287.2-289.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 290.2-292.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 293.2-295.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 295.2-296.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 296.2-299.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 300.2-304.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 307.2-310.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 310.2-313.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 314.2-318.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 319.2-321.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 321.2-329.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 330.2-335.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 336.2-339.2s",
    "upload-1247120390096433551-04 预测汽车油耗效率-1_135340.mp4 339.2-344.2s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 0.0-21.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 22.4-29.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 30.4-41.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 42.4-54.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 55.4-64.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 64.4-79.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 80.4-88.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 89.4-102.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 103.4-118.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 119.4-129.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 129.4-134.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 134.4-142.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 142.4-149.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 149.4-158.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 159.4-165.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 165.4-171.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 172.4-177.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 178.4-186.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 190.4-198.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 199.4-202.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 203.4-210.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 211.4-220.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 221.4-228.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 229.4-235.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 236.4-245.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 246.4-250.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 253.4-262.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 263.4-267.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 268.4-273.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 273.4-281.4s",
    "upload-680097949283010719-05 预测汽车油耗效率-2_135702.mp4 282.4-286.4s",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第1段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第2段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第3段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第4段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第6段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第7段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第8段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第9段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第10段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第11段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第12段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第13段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第14段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第15段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第16段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第17段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第18段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第19段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第21段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第22段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第23段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第24段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第25段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第26段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第27段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第28段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第29段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第30段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第31段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第32段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第33段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第34段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第35段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第36段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第38段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第39段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第40段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第41段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第42段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第43段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第44段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第45段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第46段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第47段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第48段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第49段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第50段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第52段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第53段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第54段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第55段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第56段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第57段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第58段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第59段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第60段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第61段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第62段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第63段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第64段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第65段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第66段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第67段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第68段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第69段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第72段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第73段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第74段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第75段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第76段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第77段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第78段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第79段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第80段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第81段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第82段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第83段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第84段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第85段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第86段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第87段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第88段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第89段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第90段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第92段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第93段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第94段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第95段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第96段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第97段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第98段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第99段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第100段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第101段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第103段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第104段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第105段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第106段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第107段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第110段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第111段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第112段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第113段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第114段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第115段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第116段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第117段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第118段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第120段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第122段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第123段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第124段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第125段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第126段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第127段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第128段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第129段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第130段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第131段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第133段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第134段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第135段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第136段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第137段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第138段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第139段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第140段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第141段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第142段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第143段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第144段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第145段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第146段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第147段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第148段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第149段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第150段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第151段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第152段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第153段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第155段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第156段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第157段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第159段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第160段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第161段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第162段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第163段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第165段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第166段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第167段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第168段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第169段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第170段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第171段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第172段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第173段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第175段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第176段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第177段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第179段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第180段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第181段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第182段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第183段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第184段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第185段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第186段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第187段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第188段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第189段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第190段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第191段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第192段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第193段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第194段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第195段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第196段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第197段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第198段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第199段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第200段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第201段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第202段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第203段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第204段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第205段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第206段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第207段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第208段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第209段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第210段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第211段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第212段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第213段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第214段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第215段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第216段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第217段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第218段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第219段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第220段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第221段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第223段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第224段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第225段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第226段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第227段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第229段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第230段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第231段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第232段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第233段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第234段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第235段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第236段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第237段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第238段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第239段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第240段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第241段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第242段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第243段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第245段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第246段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第247段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第248段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第249段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第250段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第251段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第253段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第254段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第255段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第256段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第257段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第258段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第259段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第261段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第262段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第263段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第265段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第266段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第267段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第268段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第269段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第271段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第272段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第273段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第274段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第275段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第276段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第277段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第278段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第280段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第281段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第282段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第283段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第284段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第285段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第286段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第287段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第288段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第289段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第290段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第291段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第292段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第293段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第294段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第295段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第297段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第298段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第299段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第300段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第301段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第302段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第303段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第304段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第305段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第306段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第307段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第309段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第310段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第311段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第312段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第313段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第314段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第315段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第316段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第317段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第319段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第320段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第321段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第322段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第323段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第324段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第325段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第326段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第327段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第328段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第329段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第330段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第331段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第332段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第333段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第334段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第335段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第336段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第337段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第338段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第339段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第340段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第341段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第342段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第343段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第344段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第345段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第346段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第347段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第348段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第350段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第351段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第352段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第353段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第354段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第355段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第356段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第357段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第358段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第359段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第361段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第362段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第364段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第365段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第366段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第367段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第368段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第369段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第370段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第371段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第372段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第373段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第374段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第376段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第377段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第378段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第379段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第380段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第381段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第382段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第384段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第385段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第386段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第388段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第389段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第391段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第392段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第394段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第395段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第396段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第397段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第398段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第399段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第400段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第401段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第402段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第403段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第405段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第406段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第408段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第409段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第410段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第411段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第412段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第413段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第414段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第415段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第416段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第417段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第418段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第419段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第420段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第421段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第422段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第424段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第425段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第426段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第427段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第428段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第429段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第430段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第431段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第432段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第433段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第434段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第435段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第436段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第437段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第438段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第439段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第440段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第442段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第443段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第444段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第445段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第446段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第447段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第448段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第449段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第450段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第451段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第453段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第454段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第455段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第456段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第457段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第458段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第459段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第461段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第462段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第463段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第464段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第466段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第467段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第468段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第469段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第470段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第472段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第473段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第474段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第475段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第476段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第477段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第478段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第479段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第480段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第481段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第482段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第483段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第484段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第485段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第486段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第487段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第488段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第489段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第490段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第491段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第492段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第493段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第494段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第496段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第497段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第498段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第499段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第500段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第501段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第502段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第503段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第504段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第505段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第506段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第507段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第508段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第510段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第512段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第513段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第514段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第515段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第516段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第517段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第518段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第519段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第520段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第521段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第522段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第523段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第524段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第525段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第526段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第528段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第529段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第531段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第532段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第533段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第535段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第536段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第538段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第540段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第541段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第543段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第544段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第546段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第548段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第549段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第550段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第551段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第552段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第553段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第555段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第556段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第557段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第558段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第559段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第560段",
    "cp08-样章示例-TensorFlow Lite_231113.docx 第561段",
    "03 TensorFlow Lite开发工作流程_001311.mp4 0.0-18.4s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 18.4-35.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 36.8-49.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 50.8-57.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 58.8-71.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 73.8-81.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 82.8-85.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 86.8-92.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 93.8-98.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 99.8-101.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 102.8-108.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 112.8-124.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 125.8-131.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 132.8-136.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 137.8-141.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 142.8-147.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 151.8-157.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 158.8-164.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 166.8-177.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 179.8-184.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 185.8-189.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 190.8-193.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 194.8-206.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 207.8-216.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 217.8-228.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 229.8-236.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 237.8-244.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 245.8-250.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 252.8-258.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 259.8-267.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 268.8-277.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 278.8-285.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 287.8-289.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 290.8-294.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 295.8-303.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 304.8-306.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 307.8-315.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 316.8-323.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 324.8-327.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 329.8-339.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 340.8-346.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 347.8-355.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 356.8-364.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 365.8-373.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 374.8-387.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 390.8-400.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 400.8-404.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 405.8-411.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 413.8-422.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 423.8-429.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 431.8-441.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 444.8-450.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 451.8-458.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 458.8-463.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 464.8-472.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 473.8-479.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 480.8-486.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 486.8-491.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 492.8-498.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 500.8-507.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 508.8-515.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 517.8-524.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 525.8-531.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 532.8-540.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 541.8-548.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 549.8-558.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 559.8-564.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 565.8-575.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 578.8-584.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 585.8-591.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 592.8-600.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 601.8-614.8s",
    "03 TensorFlow Lite开发工作流程_001311.mp4 614.8-621.8s"
  ]
}